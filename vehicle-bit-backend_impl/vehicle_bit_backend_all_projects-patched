### Eclipse Workspace Patch 1.0
#P mvcs-sca
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/EncryptorComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/EncryptorComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/EncryptorComponentData.java	(working copy)
@@ -7,7 +7,6 @@
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
 import mil.navy.lcs.mvcs.iface.model.node.CommsType;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 
 public class EncryptorComponentData {
Index: src/main/java/mil/navy/lcs/mvcs/sca/node/handler/ShipNodeHandler.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/node/handler/ShipNodeHandler.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/node/handler/ShipNodeHandler.java	(working copy)
@@ -6,9 +6,7 @@
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.io.IOException;
-import java.text.SimpleDateFormat;
 import java.util.Comparator;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.List;
@@ -25,8 +23,6 @@
 import com.google.common.collect.ImmutableList;
 
 import mil.navy.lcs.mvcs.common.handler.IMvcsNodeHandler;
-import mil.navy.lcs.mvcs.common.link.utils.Dates;
-import mil.navy.lcs.mvcs.sca.utils.DateUtils;
 import mil.navy.lcs.mvcs.common.radios.interfaces.IRadioPlugin;
 import mil.navy.lcs.mvcs.iface.alerts.AlertType;
 import mil.navy.lcs.mvcs.iface.alerts.AlertsManager;
@@ -52,12 +48,10 @@
 import mil.navy.lcs.mvcs.sca.archiver.ScaSyslogArchiver;
 import mil.navy.lcs.mvcs.sca.bit.EncryptorComponentData;
 import mil.navy.lcs.mvcs.sca.bit.Haf100ComponentData;
-import mil.navy.lcs.mvcs.sca.bit.BitComponentData;
 import mil.navy.lcs.mvcs.sca.bit.RadioComponentData;
 import mil.navy.lcs.mvcs.sca.bit.UpsComponentData;
 import mil.navy.lcs.mvcs.sca.bit.Vdc28ComponentData;
 import mil.navy.lcs.mvcs.sca.encryptor.ScaEncryptorPluginManager;
-import mil.navy.lcs.mvcs.sca.keyingTool.AuthenticateKeyingTool;
 import mil.navy.lcs.mvcs.sca.keyingTool.KeyingTool;
 import mil.navy.lcs.mvcs.sca.link.ScaLinkManager;
 import mil.navy.lcs.mvcs.sca.link.path.ScaRadioController;
@@ -65,6 +59,7 @@
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 import mil.navy.lcs.mvcs.sca.radios.ScaRadioPluginsManager;
 import mil.navy.lcs.mvcs.sca.rf.OTHAntennaAutomation;
+import mil.navy.lcs.mvcs.sca.utils.DateUtils;
 
 /**
  * This class is responsible to handle requests for MVCS ship node.
@@ -715,8 +710,7 @@
 
 
    /**
-    * requestScaSyslogArchive
-    * Section A: Date stamping archiving.
+    * requestScaSyslogArchive Section A: Date stamping archiving.
     *
     * Section B: Instantiate the archive tool.
     *
@@ -725,122 +719,126 @@
     */
    public void requestScaSyslogArchive()
    {
-    // Section A
-	// Update Date Stamp Nodes
-	  DateUtils date = new DateUtils();
-      node.setBitDateStamp( date.getDate() );
-	  node.setArchiveToolDateStampMonth( date.getMonth() );
-      node.setArchiveToolDateStampDay( date.getDay() );
-      node.setArchiveToolDateStampYear( date.getYear() );
-      node.setArchiveToolDateStampHour( date.getHour() );
-      node.setArchiveToolDateStampMinute( date.getMinute() );
+      // Section A
+      // Update Date Stamp Nodes
+      DateUtils date = new DateUtils();
+      node.setBitDateStamp(date.getDate());
+      node.setArchiveToolDateStampMonth(date.getMonth());
+      node.setArchiveToolDateStampDay(date.getDay());
+      node.setArchiveToolDateStampYear(date.getYear());
+      node.setArchiveToolDateStampHour(date.getHour());
+      node.setArchiveToolDateStampMinute(date.getMinute());
 
       // Section B
       ScaSyslogArchiver arch = new ScaSyslogArchiver();
       arch.run();
 
-      node.setArchiveToolFileCount( arch.countFilesInDirectory());
+      node.setArchiveToolFileCount(arch.countFilesInDirectory());
       node.setArchiveToolSpaceAvailable(arch.spaceAvailable());
 
-      new KeyingTool( node );
+      new KeyingTool(node);
 
 
    }
 
+
    public void requestScaSysCleanlogArchive()
    {
-	   ScaSyslogArchiver arch = new ScaSyslogArchiver();
-	   try
-	   {
-		   arch.deleteDirectoryFiles();
-		   // Set status values back to default
-		   node.setArchiveToolFileCount( 0 );
-		   node.setArchiveToolSpaceAvailable( 100 );
-	   }
-	   catch (IOException e)
-	   {
-		   e.printStackTrace();
-	   }
+      ScaSyslogArchiver arch = new ScaSyslogArchiver();
+      try
+      {
+         arch.deleteDirectoryFiles();
+         // Set status values back to default
+         node.setArchiveToolFileCount(0);
+         node.setArchiveToolSpaceAvailable(100);
+      }
+      catch (IOException e)
+      {
+         e.printStackTrace();
+      }
 
    }
 
+
    // END Archiving Tool Section
 
    /**
     *
-    * requestBitStatus
+    * To request BIT to start and populate the node with results once they are completed. This is
+    * where we are going to pull our custom bit class data through for the ship side.
     *
-    * This is where we are going to pull our custom bit class data through for the ship side
-    *
     */
-   public void requestBitStatus()
+   public void requestBitStart()
    {
-	   RadioComponentData radioData = new RadioComponentData(node);
-	   Haf100ComponentData haf100Data = new Haf100ComponentData(node);
-	   UpsComponentData upsData = new UpsComponentData(node);
-	   EncryptorComponentData encryptorData = new EncryptorComponentData(node);
-	   Vdc28ComponentData vdc28Data = new Vdc28ComponentData(node);
-	   																		 
-	   node.setHaf100Status(haf100Data.pollHaf100OverallStatus(), haf100Data.haf100OverallGIF());
-	   node.setHaf100Powered(haf100Data.polHaf100Status());
-	   
-	   node.setPrc117Powered(radioData.prc117PowerStatus(), radioData.getColorForPRC117PowerText());
-	   node.setPrc117Link(radioData.prc117LinkStatus());
-	   //node.setPrc117Rim(radioData.prc117RimStatus());
-	   
-	   node.setPrc117Amp(radioData.prc117AmpStatus(), radioData.getColorForPRC117AmpText());
-	   node.setRt1944Powered(radioData.rt1944PowerStatus(), radioData.getColorForRt1944PowerText());
-	   node.setRt1944Link(radioData.rt1944LinkStatus());
-	   //node.setRt1944Rim(radioData.rt1944RimStatus());
-	   
-	   node.setRt1944Amp(radioData.rt1944AmpStatus(), radioData.getColorForAmp1Text());
-	   node.setRt1944Amp2(radioData.rt1944Amp2Status(), radioData.getColorForAmp2Text());
-	   radioData.powerDevicesStatusCounter();
-	   node.setMcg101Powered(radioData.mcg101PowerStatus());
-	   node.setMcg101Link(radioData.mcg101LinkStatus());
-	   node.set28VdcPowered(vdc28Data.powerSupply28VDC());
-	   node.setCircuitBreaker1Status(vdc28Data.circuitBreakerStatus(0), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker2Status(vdc28Data.circuitBreakerStatus(1), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker3Status(vdc28Data.circuitBreakerStatus(2), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker4Status(vdc28Data.circuitBreakerStatus(3), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker5Status(vdc28Data.circuitBreakerStatus(4), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker7Status(vdc28Data.circuitBreakerStatus(5), vdc28Data.getColorForBreaker());
-	   node.setUpsPowered(upsData.upsPowerStatus());
-	   node.setUpsInverterStatus(upsData.upsBatteryStatus());
-	   node.setUpsBatteryStatus(upsData.upsBatteryStatus());
-	   node.setUpsStatus(upsData.upsOverallStatus(), upsData.upsGIF());
-	   
-	   node.setIps250Keyed(encryptorData.ips250KeyedStatus());
-	   node.setIps250LosActive(encryptorData.ips250KeyingLosActive());
-	   node.setIps250OthActive(encryptorData.ips250KeyingOthActive());
-	   node.setIps250Status(encryptorData.ips250OverallStatus(), encryptorData.ips250GIF());
+      RadioComponentData radioData = new RadioComponentData(node);
+      Haf100ComponentData haf100Data = new Haf100ComponentData(node);
+      UpsComponentData upsData = new UpsComponentData(node);
+      EncryptorComponentData encryptorData = new EncryptorComponentData(node);
+      Vdc28ComponentData vdc28Data = new Vdc28ComponentData(node);
 
-	   node.setMatrixSwitchStatus(radioData.matrixSwitchOverallStatus(), radioData.matrixSwitchGIF());
-	   
-	   node.setRt1944Status(radioData.rt1944OverallStatus(), radioData.rt1944GIF());
-	   node.setPrc117Status(radioData.prc117OverallStatus(), radioData.prc117GIF());
-	   node.setMcg101Status(radioData.mcg101OverallStatus(), radioData.mcg101GIF());
-	   node.set28VdcStatus(vdc28Data.vdc28OverallStatus(), vdc28Data.vdc28GIF());
+      node.setHaf100Status(haf100Data.pollHaf100OverallStatus(), haf100Data.haf100OverallGIF());
+      node.setHaf100Powered(haf100Data.polHaf100Status());
 
-	   DateUtils date = new DateUtils();
-	   node.setBitDateStamp( date.getDate() );
-	   node.setBitDateStampMonth( date.getMonth() );
-	   node.setBitDateStampDay( date.getDay() );
-	   node.setBitDateStampYear( date.getYear() );
-	   node.setBitDateStampHour( date.getHour() );
-	   node.setBitDateStampMinute( date.getMinute() );
+      node.setPrc117Powered(radioData.prc117PowerStatus(), radioData.getColorForPRC117PowerText());
+      node.setPrc117Link(radioData.prc117LinkStatus());
+      // node.setPrc117Rim(radioData.prc117RimStatus());
+
+      node.setPrc117Amp(radioData.prc117AmpStatus(), radioData.getColorForPRC117AmpText());
+      node.setRt1944Powered(radioData.rt1944PowerStatus(), radioData.getColorForRt1944PowerText());
+      node.setRt1944Link(radioData.rt1944LinkStatus());
+      // node.setRt1944Rim(radioData.rt1944RimStatus());
+
+      node.setRt1944Amp(radioData.rt1944AmpStatus(), radioData.getColorForAmp1Text());
+      node.setRt1944Amp2(radioData.rt1944Amp2Status(), radioData.getColorForAmp2Text());
+      radioData.powerDevicesStatusCounter();
+      node.setMcg101Powered(radioData.mcg101PowerStatus());
+      node.setMcg101Link(radioData.mcg101LinkStatus());
+      node.set28VdcPowered(vdc28Data.powerSupply28VDC());
+      node.setCircuitBreaker1Status(vdc28Data.circuitBreakerStatus(0), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker2Status(vdc28Data.circuitBreakerStatus(1), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker3Status(vdc28Data.circuitBreakerStatus(2), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker4Status(vdc28Data.circuitBreakerStatus(3), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker5Status(vdc28Data.circuitBreakerStatus(4), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker7Status(vdc28Data.circuitBreakerStatus(5), vdc28Data.getColorForBreaker());
+      node.setUpsPowered(upsData.upsPowerStatus());
+      node.setUpsInverterStatus(upsData.upsBatteryStatus());
+      node.setUpsBatteryStatus(upsData.upsBatteryStatus());
+      node.setUpsStatus(upsData.upsOverallStatus(), upsData.upsGIF());
+
+      node.setIps250Keyed(encryptorData.ips250KeyedStatus());
+      node.setIps250LosActive(encryptorData.ips250KeyingLosActive());
+      node.setIps250OthActive(encryptorData.ips250KeyingOthActive());
+      node.setIps250Status(encryptorData.ips250OverallStatus(), encryptorData.ips250GIF());
+
+      node.setMatrixSwitchStatus(radioData.matrixSwitchOverallStatus(), radioData.matrixSwitchGIF());
+
+      node.setRt1944Status(radioData.rt1944OverallStatus(), radioData.rt1944GIF());
+      node.setPrc117Status(radioData.prc117OverallStatus(), radioData.prc117GIF());
+      node.setMcg101Status(radioData.mcg101OverallStatus(), radioData.mcg101GIF());
+      node.set28VdcStatus(vdc28Data.vdc28OverallStatus(), vdc28Data.vdc28GIF());
+
+      DateUtils date = new DateUtils();
+      node.setBitDateStamp(date.getDate());
+      node.setBitDateStampMonth(date.getMonth());
+      node.setBitDateStampDay(date.getDay());
+      node.setBitDateStampYear(date.getYear());
+      node.setBitDateStampHour(date.getHour());
+      node.setBitDateStampMinute(date.getMinute());
    }
 
-   public void requestRTCSync() {
-	   DateUtils date = new DateUtils();
-	   node.setRTCDateStamp( date.getDate() );
-	   node.setRTCDateStampMonth( date.getMonth() );
-	   node.setRTCDateStampDay( date.getDay() );
-	   node.setRTCDateStampYear( date.getYear() );
-	   node.setRTCDateStampHour( date.getHour() );
-	   node.setRTCDateStampMinute( date.getMinute() );
+
+   public void requestRTCSync()
+   {
+      DateUtils date = new DateUtils();
+      node.setRTCDateStamp(date.getDate());
+      node.setRTCDateStampMonth(date.getMonth());
+      node.setRTCDateStampDay(date.getDay());
+      node.setRTCDateStampYear(date.getYear());
+      node.setRTCDateStampHour(date.getHour());
+      node.setRTCDateStampMinute(date.getMinute());
    }
 
+
    /**
     *
     * To change antenna override mode.
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/RadioComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/RadioComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/RadioComponentData.java	(working copy)
@@ -5,15 +5,12 @@
 
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
-import mil.navy.lcs.mvcs.common.misc.ConstantValues;
 import mil.navy.lcs.mvcs.iface.model.node.CommsType;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
 import mil.navy.lcs.mvcs.iface.model.node.RadioLink;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.iface.power.PowerDevice;
 import mil.navy.lcs.mvcs.iface.power.PowerOutput;
 import mil.navy.lcs.mvcs.iface.rf.RFOutputType;
-import mil.navy.lcs.mvcs.sca.bit.BitConstants;
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 import mil.navy.lcs.mvcs.sca.snmp.agent.workers.RadioTableWorker;
 
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/Haf100ComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/Haf100ComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/Haf100ComponentData.java	(working copy)
@@ -8,8 +8,6 @@
 import mil.navy.lcs.mvcs.iface.filter.FilterDevice;
 import mil.navy.lcs.mvcs.iface.filter.IFilterDeviceHandler;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
-import mil.navy.lcs.mvcs.sca.filter.ScaFilterDeviceHandler;
 
 public class Haf100ComponentData {
 	private final MvcsNode node;
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/UpsComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/UpsComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/UpsComponentData.java	(working copy)
@@ -6,11 +6,7 @@
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
 import mil.navy.lcs.mvcs.common.config.model.PowerUps;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
-import mil.navy.lcs.mvcs.common.log.LoggingManager;
-import mil.navy.lcs.mvcs.common.misc.serialUtilities.SerialComms;
-import mil.navy.lcs.mvcs.common.misc.serialUtilities.SerialReceivedDataListenerInterface;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.sca.powerUps.UpsHardwareData;
 import mil.navy.lcs.mvcs.sca.powerUps.UpsManager;
 
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/BitComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/BitComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/BitComponentData.java	(working copy)
@@ -1,77 +1,12 @@
 package mil.navy.lcs.mvcs.sca.bit;
 
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-
-import java.io.IOException;
-import java.util.Hashtable;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.TimeUnit;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import javax.swing.JOptionPane;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.ImmutableMap;
-import com.ireasoning.protocol.TimeoutException;
-import com.ireasoning.protocol.snmp.SnmpConst;
-
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
-import mil.navy.lcs.mvcs.common.config.exception.ConfigException;
-import mil.navy.lcs.mvcs.common.config.model.Channel;
-import mil.navy.lcs.mvcs.common.config.model.CircuitBreaker;
-import mil.navy.lcs.mvcs.common.config.model.CredentialSimple;
-import mil.navy.lcs.mvcs.common.config.model.CredentialSnmp;
-import mil.navy.lcs.mvcs.common.config.model.CrossDomain;
-import mil.navy.lcs.mvcs.common.config.model.Encrypter;
-import mil.navy.lcs.mvcs.common.config.model.MatrixSwitch;
-import mil.navy.lcs.mvcs.common.config.model.PowerUps;
-import mil.navy.lcs.mvcs.common.config.model.Radio;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
-import mil.navy.lcs.mvcs.common.encryptor.EncryptorPluginManager;
-import mil.navy.lcs.mvcs.common.encryptor.interfaces.IEncryptorPlugin;
-import mil.navy.lcs.mvcs.common.hardware.HardwareManager;
-import mil.navy.lcs.mvcs.common.log.LoggingManager;
-import mil.navy.lcs.mvcs.common.misc.ConstantValues;
-import mil.navy.lcs.mvcs.common.misc.serialUtilities.SerialComms;
-import mil.navy.lcs.mvcs.common.node.PowerOutputData;
-import mil.navy.lcs.mvcs.iface.filter.FilterDevice;
-import mil.navy.lcs.mvcs.iface.filter.FilterStatus;
-import mil.navy.lcs.mvcs.iface.model.node.CommsType;
-import mil.navy.lcs.mvcs.iface.model.node.LinkModel;
-import mil.navy.lcs.mvcs.iface.model.node.MvcsLinkType;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.RadioLink;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
-import mil.navy.lcs.mvcs.iface.power.IPowerDeviceHandler;
-import mil.navy.lcs.mvcs.iface.power.PowerDevice;
-import mil.navy.lcs.mvcs.iface.power.PowerOutput;
-import mil.navy.lcs.mvcs.iface.power.PowerOutputType;
-import mil.navy.lcs.mvcs.iface.rf.RFDevice;
-import mil.navy.lcs.mvcs.iface.rf.RFOutputType;
-import mil.navy.lcs.mvcs.iface.safety.MvcsSafetyException;
-import mil.navy.lcs.mvcs.iface.status.Status;
-import mil.navy.lcs.mvcs.iface.status.StatusItem;
-import mil.navy.lcs.mvcs.sca.encryptor.ScaEncryptorPluginManager;
-import mil.navy.lcs.mvcs.sca.filter.ScaFilterDeviceHandler;
-import mil.navy.lcs.mvcs.sca.main.ShipState;
-import mil.navy.lcs.mvcs.sca.node.handler.ShipHandlerBuilder;
-import mil.navy.lcs.mvcs.sca.power.IMideasternComms;
-import mil.navy.lcs.mvcs.sca.power.MideasternTestComms;
-import mil.navy.lcs.mvcs.sca.power.PowerDeviceHandler_28VMidEastern;
-import mil.navy.lcs.mvcs.sca.powerUps.UpsHardwareData;
-import mil.navy.lcs.mvcs.sca.powerUps.UpsManager;
-import mil.navy.lcs.mvcs.sca.radios.ScaRadioPluginsManager;
-import mil.navy.lcs.mvcs.sca.snmp.ScaSnmpManager;
-import mil.navy.lcs.mvcs.sca.snmp.agent.workers.MvcsTableWorker;
-import mil.navy.lcs.mvcs.sca.snmp.agent.workers.RadioTableWorker;
 
 public class BitComponentData {
 	private final MvcsNode node;
Index: src/main/java/mil/navy/lcs/mvcs/sca/cnc/NodeStatusUpdater.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/cnc/NodeStatusUpdater.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/cnc/NodeStatusUpdater.java	(working copy)
@@ -3,11 +3,14 @@
 package mil.navy.lcs.mvcs.sca.cnc;
 
 
+import java.util.ArrayList;
 import java.util.Map;
 
 import mil.navy.lcs.mvcs.common.log.LoggingManager;
 import mil.navy.lcs.mvcs.common.messages.ActiveLinkMessage;
 import mil.navy.lcs.mvcs.common.messages.AlertMessage;
+import mil.navy.lcs.mvcs.common.messages.BitResultMessage;
+import mil.navy.lcs.mvcs.common.messages.BitResultMessage.Ips250Status;
 import mil.navy.lcs.mvcs.common.messages.CryptoMessage;
 import mil.navy.lcs.mvcs.common.messages.EmconMessage;
 import mil.navy.lcs.mvcs.common.messages.InhibitMessage;
@@ -40,6 +43,7 @@
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 
 import com.google.common.collect.Maps;
+import com.ireasoning.util.Logger;
 
 /**
  * This class is responsible for updating vehicle nodes when messages are generated and received
@@ -315,6 +319,29 @@
    };
 
 
+   private final IMessageProcessor bitResultProcessor = new IMessageProcessor()
+   {
+      @Override
+      public void process(Message message)
+      {
+         BitResultMessage brm = (BitResultMessage) message;
+         LoggingManager.getPrimaryLogger().info("BIT result has arrived from node {} ", brm.getNodeId());
+         LoggingManager.getPrimaryLogger().info("HAF100: " + brm.haf100Status);
+         LoggingManager.getPrimaryLogger().info("LOS Freq: " + brm.losRadioFrequency);
+         LoggingManager.getPrimaryLogger().info("RF Switch: " + brm.rfSwitchStatus);
+         LoggingManager.getPrimaryLogger().info("Power Module: " + brm.powerModuleStatus);
+         for (int i = 0; i < brm.ips250s.size(); i++)
+         {
+            Ips250Status ips = brm.ips250s.get(i);
+            LoggingManager.getPrimaryLogger().info("IPS-250  IP: " + ips.redIp);
+            LoggingManager.getPrimaryLogger().info("         Reachable: " + ips.reachable);
+            LoggingManager.getPrimaryLogger().info("         Keyed: " + ips.keyed);
+         }
+
+      }
+   };
+
+
    /**
     * Initializes NodeStatusUpdater by registering for property change support.
     * 
@@ -344,5 +371,6 @@
       mr.register(AlertMessage.class, alertProcessor);
       mr.register(LinkPriorityMessage.class, linkPriorityProcessor);
       mr.register(LinkSwitchResultMessage.class, linkSwitchResultProcessor);
+      mr.register(BitResultMessage.class, bitResultProcessor);
    }
 }
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/Vdc28ComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/Vdc28ComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/Vdc28ComponentData.java	(working copy)
@@ -1,8 +1,5 @@
 package mil.navy.lcs.mvcs.sca.bit;
 
-import java.util.LinkedList;
-import java.util.List;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -9,14 +6,12 @@
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.iface.power.IPowerDeviceHandler;
 import mil.navy.lcs.mvcs.iface.power.PowerDevice;
 import mil.navy.lcs.mvcs.iface.power.PowerOutput;
+import mil.navy.lcs.mvcs.sca.main.ShipState;
 import mil.navy.lcs.mvcs.sca.power.IMideasternComms;
 import mil.navy.lcs.mvcs.sca.power.PowerDeviceHandler_28VMidEastern;
-import mil.navy.lcs.mvcs.sca.bit.BitConstants;
-import mil.navy.lcs.mvcs.sca.main.ShipState;
 
 public class Vdc28ComponentData {
 	private final MvcsNode node;
Index: src/main/java/mil/navy/lcs/mvcs/sca/main/MvcsRemoteEngine.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/main/MvcsRemoteEngine.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/main/MvcsRemoteEngine.java	(working copy)
@@ -279,6 +279,7 @@
       handler.requestZeroize();
    }
 
+
    @Override
    public void requestTestOverRfTestPort(String nodeId, String linkId, String rfOutputType, boolean on) throws RemoteException
    {
@@ -385,63 +386,67 @@
          logger.error("Error Archiving Syslog files: ", e);
       }
    }
-   
+
+
    @Override
-	public void requestArchiveCleanLogFiles(String nodeId, boolean active, int duration) throws RemoteException
-	{
-		try
-	    {
-	       // Section A
-	       if (nodeId.equals("100"))
-	       {
-	          MvcsNode node = ShipState.model.getNode(nodeId);
-	          ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
-	          handler.requestScaSysCleanlogArchive();
-	       }
-	       
-	    }
-	    catch (Exception e)
-	    {
-	       logger.error("Error Archiving Syslog files: ", e);
-	    }
-		
-	}
+   public void requestArchiveCleanLogFiles(String nodeId, boolean active, int duration) throws RemoteException
+   {
+      try
+      {
+         // Section A
+         if (nodeId.equals("100"))
+         {
+            MvcsNode node = ShipState.model.getNode(nodeId);
+            ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
+            handler.requestScaSysCleanlogArchive();
+         }
 
+      }
+      catch (Exception e)
+      {
+         logger.error("Error Archiving Syslog files: ", e);
+      }
 
-@Override
-public void requestBitStatus(String nodeId, boolean active, int duration) throws RemoteException {
-	try
-    {
-       // Section A
-       if (nodeId.equals("100"))
-       {
-          MvcsNode node = ShipState.model.getNode(nodeId);
-          ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
-          handler.requestBitStatus();
-       }
-    }
-    catch (Exception e)
-    {
-       logger.error("Error Fetching PM/FL Data", e);
-    }
-}
+   }
 
-@Override
-public void requestKeyingToolStatus(String nodeId, boolean active, int duration) throws RemoteException {
-	try
-    {
-       // Section A
-       if (nodeId.equals("100"))
-       {
-          MvcsNode node = ShipState.model.getNode(nodeId);
-          ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
-          handler.requestBitStatus();
-       }
-    }
-    catch (Exception e)
-    {
-       logger.error("Error Fetching PM/FL Data", e);
-    }
-}
 
+   /**
+    * To request BIT status for the shipboard node or a remote vehicle node.
+    * 
+    * @param nodeId - the ID of node for BIT
+    * @param active - start if true
+    * @param duration - the duration in seconds
+    * @throws RemoteException
+    */
+   @Override
+   public void requestBitStatus(String nodeId, boolean active, int duration) throws RemoteException
+   {
+      try
+      {
+         MvcsNode node = ShipState.model.getNode(nodeId);
+         //ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
+         IMvcsNodeHandler handler = ShipState.getNodeHandler(node);
+         handler.requestBitStart();
+      }
+      catch (Exception e)
+      {
+         logger.error("Error Fetching PM/FL Status.", e);
+      }
+   }
+
+
+   @Override
+   public void requestKeyingToolStatus(String nodeId, boolean active, int duration) throws RemoteException
+   {
+      try
+      {
+         MvcsNode node = ShipState.model.getNode(nodeId);
+         ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
+      }
+      catch (Exception e)
+      {
+         logger.error("Error Fetching KeyingTool Status.", e);
+      }
+   }
+
 }// END Class MvcsRemoteEngine
\ No newline at end of file
Index: src/main/test/mil/navy/lcs/mvcs/sca/model/TestMvcsShipNodeHandler.java
===================================================================
--- src/main/test/mil/navy/lcs/mvcs/sca/model/TestMvcsShipNodeHandler.java	(revision 9922)
+++ src/main/test/mil/navy/lcs/mvcs/sca/model/TestMvcsShipNodeHandler.java	(working copy)
@@ -15,8 +15,6 @@
    @Override
    public void requestEmcon(boolean emcon, long duration)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -23,8 +21,6 @@
    @Override
    public void requestPower(String outputName, boolean active) throws MvcsSafetyException
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -31,8 +27,6 @@
    @Override
    public void requestPowerAll(boolean powerAll)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -39,8 +33,6 @@
    @Override
    public void requestPowerUnchecked(String outputName, boolean active)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -47,8 +39,6 @@
    @Override
    public void requestRf(String linkId, RFOutputType rfOutputType, boolean active) throws MvcsSafetyException
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -55,8 +45,6 @@
    @Override
    public void requestRfUnchecked(String linkId, RFOutputType rfOutputType, boolean active)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -63,15 +51,11 @@
    @Override
    public void requestShutdown(ExitAction exitAction)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
    public void requestTransmitAllowed(boolean transmitAllowed)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -78,8 +62,6 @@
    @Override
    public void requestZeroize()
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -86,8 +68,6 @@
    @Override
    public void setGpsLatitude(double latitude)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -94,8 +74,6 @@
    @Override
    public void setSpeed(double speed)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -102,8 +80,6 @@
    @Override
    public void setBearing(double bearing)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -110,8 +86,6 @@
    @Override
    public void setGpsLongitude(double longitude)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -118,21 +92,16 @@
    @Override
    public void setCourse(double course)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
    public void requestEmconDuration(long duration)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
    public void requestRadioFrequencyChange(String radioId, String frequency)
    {
-      // TODO Auto-generated method stub
 
    }
 
@@ -142,4 +111,10 @@
    {
    }
 
+
+   @Override
+   public void requestBitStart()
+   {
+   }
+
 }
Index: src/main/java/mil/navy/lcs/mvcs/sca/node/handler/VehicleNodeHandler.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/node/handler/VehicleNodeHandler.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/node/handler/VehicleNodeHandler.java	(working copy)
@@ -18,6 +18,7 @@
 import mil.navy.lcs.mvcs.common.log.LoggingManager;
 import mil.navy.lcs.mvcs.common.messages.AcknowledgementMessage;
 import mil.navy.lcs.mvcs.common.messages.ArchiveMessage;
+import mil.navy.lcs.mvcs.common.messages.BitMessage;
 import mil.navy.lcs.mvcs.common.messages.EmconMessage;
 import mil.navy.lcs.mvcs.common.messages.LinkConfigureMessage;
 import mil.navy.lcs.mvcs.common.messages.Message;
@@ -316,7 +317,6 @@
    }
 
 
-
    /**
     * To request use the given link as the primary link of vehicle.
     * 
@@ -343,6 +343,7 @@
       }
    }
 
+
    /**
     * To request change of vehicle power conservation mode
     * 
@@ -828,5 +829,13 @@
    }// end of inner class (FrequencyChangeListener)
 
 
+   @Override
+   public void requestBitStart()
+   {
+      logger.debug("BIT start has requested for node:{}", node.getNodeId());
+      messageQueue.add(new BitMessage(true));
+      //TODO need to process acknowledgement?
+   }
 
+
 }// end of class
#P mvcs-vca
Index: src/main/java/mil/navy/lcs/mvcs/vca/encryptor/VcaEncryptorPluginManager.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/vca/encryptor/VcaEncryptorPluginManager.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/vca/encryptor/VcaEncryptorPluginManager.java	(working copy)
@@ -3,9 +3,6 @@
 package mil.navy.lcs.mvcs.vca.encryptor;
 
 
-import javax.swing.JOptionPane;
-
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -21,7 +18,8 @@
 import mil.navy.lcs.mvcs.vca.main.VehicleState;
 
 /**
- * This class is responsible of handling requests to zeroize and sanitize.
+ * This class is responsible of handling requests zeroizing, sanitizing, and polling status of
+ * encryption devices.
  * 
  * <p>
  * $LastChangedBy$ <br>
@@ -33,7 +31,7 @@
 public class VcaEncryptorPluginManager extends EncryptorPluginManager
 {
    private static final Logger logger = LoggerFactory.getLogger(VcaEncryptorPluginManager.class);
-   
+
    /** Variable used to hold an instance of this object */
    private static VcaEncryptorPluginManager instance = null;
 
@@ -52,6 +50,7 @@
       // list of valid encryptor plug-ins from configuration
       loadListOfEncryptorPlugins();
       instantiatePlugins(VehicleState.model.node.getRadioLinks());
+      // start polling keyed status of encryptors then update the node with keyed status.
    }
 
 
@@ -126,7 +125,7 @@
       {
          try
          {
-            if(plugin.zeroize())
+            if (plugin.zeroize())
                LoggingManager.getPrimaryLogger().info("Successfully commanded the plugin for zeroizing keys.");
             else
                LoggingManager.getPrimaryLogger().info("Failed to command the plugin for zeroizing keys.");
@@ -140,25 +139,31 @@
       VehicleState.model.node.setKeyed(false);
       VcaMain.shutdown(ExitAction.COLD_SHUTDOWN);
    }
-   
-   public void isKeyed() 
+
+
+   /**
+    * To check encryption devices are loaded with keys.
+    * 
+    * @return true if all of the sub-encryptors are keyed.
+    */
+   public boolean isAllKeyed()
    {
-      logger.info("VcaEncryptorPluginManager isKeyed");
-      boolean keyResult;
-//      for (IEncryptorPlugin plugin : runtimeEncryptorPlugins.values())
-//      {
-//         try
-//         {
-//            keyResult = plugin.isKeyed();
-//            logger.info("Keying tool test checking if CIK is loaded " + keyResult);
-//            JOptionPane.showMessageDialog(null, "Keying tool test checking if CIK is loaded " + keyResult);
-//         }
-//         catch (Exception ex)
-//         {
-//            LoggingManager.getPrimaryLogger().error("Error: ", ex);
-//         }
-//      }
-      
+      logger.debug("VcaEncryptorPluginManager checking keyed status of all encryptors...");
+      boolean keyResult = true; // defaults to true if there is no encryptor.
+      for (IEncryptorPlugin plugin : runtimeEncryptorPlugins.values())
+      {
+         try
+         {
+            boolean keyed = plugin.isKeyed(); // polling keyed status from encryptor
+            logger.info("Encryptor[{}] CIK loaded? {} ", plugin.getEncryptorName(), keyed);
+            keyResult &= keyed; // accumulate results
+         }
+         catch (Exception ex)
+         {
+            LoggingManager.getPrimaryLogger().error("Error: ", ex);
+         }
+      }
+      return keyResult;
    }
 
 }
Index: src/main/java/mil/navy/lcs/mvcs/vca/node/handler/RmmvHandlerBuilder.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/vca/node/handler/RmmvHandlerBuilder.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/vca/node/handler/RmmvHandlerBuilder.java	(working copy)
@@ -67,11 +67,10 @@
       if (rfConfig.isTesting())
          handler.setRfHandler(new RfDeviceHandler_Rmmv(new MockDigitalIO(), new MockRadioSwitchHandler()));
       else
-         // RT1944 radio has two outputs and they are used for different antennas (Main and
-         // Alternate).
+         // RT1944 radio has two outputs and they are used for different antennas (Main, Alt).
          handler.setRfHandler(new RfDeviceHandler_Rmmv(new JniRmmvDigitalIO(), new Rt1944RadioSwitchHandler()));
 
-      // Create FilterDevice to be used by the ship
+      // Create FilterDevice to be used
       CredentialSimple userPass = ConfigManager.getInstance().getSimpleCredentialById("haf");
       StringBuilder snmpSetting = new StringBuilder();
       snmpSetting.append(userPass.getUserName()).append(":").append(userPass.getPassword());
Index: src/main/java/mil/navy/lcs/mvcs/vca/node/handler/UissHandlerBuilder.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/vca/node/handler/UissHandlerBuilder.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/vca/node/handler/UissHandlerBuilder.java	(working copy)
@@ -5,11 +5,14 @@
 
 import java.net.SocketException;
 
+import mil.navy.lcs.mvcs.common.config.ConfigManager;
+import mil.navy.lcs.mvcs.common.config.model.CredentialSimple;
 import mil.navy.lcs.mvcs.common.config.model.MatrixSwitch;
 import mil.navy.lcs.mvcs.common.config.model.Power;
 import mil.navy.lcs.mvcs.iface.model.node.VehicleNode;
 import mil.navy.lcs.mvcs.vca.dio.JniDigitalIO;
 import mil.navy.lcs.mvcs.vca.dio.MockDigitalIO;
+import mil.navy.lcs.mvcs.vca.filter.VcaFilterDeviceHandler;
 import mil.navy.lcs.mvcs.vca.power.PowerDeviceHandler_Uiss;
 import mil.navy.lcs.mvcs.vca.rf.MockRadioSwitchHandler;
 import mil.navy.lcs.mvcs.vca.rf.RfDeviceHandler_Uiss;
@@ -65,6 +68,13 @@
          handler.setRfHandler(new RfDeviceHandler_Uiss(new MockDigitalIO(), new MockRadioSwitchHandler()));
       else
          handler.setRfHandler(new RfDeviceHandler_Uiss(new JniDigitalIO(), new Rt1944RadioSwitchHandler()));
+      
+      // Create FilterDevice to be used
+      CredentialSimple userPass = ConfigManager.getInstance().getSimpleCredentialById("haf");
+      StringBuilder snmpSetting = new StringBuilder();
+      snmpSetting.append(userPass.getUserName()).append(":").append(userPass.getPassword());
+      if (!rfConfig.isTesting())
+         handler.setFilterDeviceHandler(new VcaFilterDeviceHandler(node, snmpSetting.toString()));
 
       UissSafetyManager safetyManager = new UissSafetyManager(node, handler);
       handler.setSafetyManager(safetyManager);
Index: src/main/java/mil/navy/lcs/mvcs/vca/cnc/NodeCommandProcessor.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/vca/cnc/NodeCommandProcessor.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/vca/cnc/NodeCommandProcessor.java	(working copy)
@@ -7,6 +7,7 @@
 import org.slf4j.LoggerFactory;
 
 import mil.navy.lcs.mvcs.common.messages.AlertMessage;
+import mil.navy.lcs.mvcs.common.messages.BitMessage;
 import mil.navy.lcs.mvcs.common.messages.EmconMessage;
 import mil.navy.lcs.mvcs.common.messages.HeartbeatOnOffMessage;
 import mil.navy.lcs.mvcs.common.messages.LinkConfigureMessage;
@@ -272,7 +273,18 @@
       }
    };
 
+   private final IMessageProcessor bitMessageProcessor = new IMessageProcessor()
+   {
+      @Override
+      public void process(Message message)
+      {
+         BitMessage bm = (BitMessage) message;
+         if (bm.isActivate())
+            vehicleHandler.requestBitStart();
+      }
+   };
 
+
    /**
     * To start the command processor to handle in-comming commands.
     * 
@@ -319,6 +331,7 @@
       mr.register(LinkSwitchAbortMessage.class, linkSwitchAbortProcessor);
       mr.register(NearShipMessage.class, nearShipProcessor);
       mr.register(LinkConfigureMessage.class, linkConfigureProcessor);
+      mr.register(BitMessage.class, bitMessageProcessor);
 
       // IMPORTANT: set TRUE on ready to process packets.
       // Allows packet receiver to start acknowledging on incoming packets.
Index: src/main/java/mil/navy/lcs/mvcs/vca/node/handler/RemoteVehicleNodeHandler.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/vca/node/handler/RemoteVehicleNodeHandler.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/vca/node/handler/RemoteVehicleNodeHandler.java	(working copy)
@@ -5,6 +5,7 @@
 
 import java.io.IOException;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Date;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
@@ -12,8 +13,10 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import mil.navy.lcs.mvcs.common.encryptor.interfaces.IEncryptorPlugin;
 import mil.navy.lcs.mvcs.common.handler.IMvcsNodeHandler;
-import mil.navy.lcs.mvcs.common.log.LoggingManager;
+import mil.navy.lcs.mvcs.common.messages.BitResultMessage;
+import mil.navy.lcs.mvcs.common.messages.BitResultMessage.Ips250Status;
 import mil.navy.lcs.mvcs.common.messages.RadioConfigureMessage;
 import mil.navy.lcs.mvcs.common.misc.ConstantValues;
 import mil.navy.lcs.mvcs.common.net.receiver.MessageReceiver;
@@ -22,10 +25,13 @@
 import mil.navy.lcs.mvcs.iface.app.ExitAction;
 import mil.navy.lcs.mvcs.iface.app.MvcsThreads;
 import mil.navy.lcs.mvcs.iface.filter.IFilterDeviceHandler;
+import mil.navy.lcs.mvcs.iface.model.node.CommsType;
 import mil.navy.lcs.mvcs.iface.model.node.ConstantValues.LinkSwitchAck;
+import mil.navy.lcs.mvcs.iface.model.node.LinkModel;
 import mil.navy.lcs.mvcs.iface.model.node.PowerConservation;
 import mil.navy.lcs.mvcs.iface.model.node.RadioLink;
 import mil.navy.lcs.mvcs.iface.model.node.SleepState;
+import mil.navy.lcs.mvcs.iface.model.node.UuvNode;
 import mil.navy.lcs.mvcs.iface.model.node.VehicleNode;
 import mil.navy.lcs.mvcs.iface.power.IPowerDeviceHandler;
 import mil.navy.lcs.mvcs.iface.power.PowerDevice;
@@ -495,7 +501,7 @@
          }
 
       // invalid sleep state
-      LoggingManager.getPrimaryLogger().error("There was an error setting vehicle sleep state to " + sleepState + ".  " + sleepState + " is an invalid state.");
+      logger.error("There was an error setting vehicle sleep state to " + sleepState + ".  " + sleepState + " is an invalid state.");
    }
 
 
@@ -579,7 +585,7 @@
       }
       catch (Exception e)
       {
-         LoggingManager.getPrimaryLogger().error("Invalid value {} for linkSwitchAck.", ack);
+         logger.error("Invalid value {} for linkSwitchAck.", ack);
       }
    }
 
@@ -597,7 +603,7 @@
       else if (deployStatus.equalsIgnoreCase(ConstantValues.VehicleInWater.NotInWater.name()))
          node.setDeployed(false);
       else
-         LoggingManager.getPrimaryLogger().error("Invalid value {} to change deploy status.", deployStatus);
+         logger.error("Invalid value {} to change deploy status.", deployStatus);
 
    }
 
@@ -667,7 +673,7 @@
       }
       catch (Exception e)
       {
-         LoggingManager.getPrimaryLogger().error("Error connecting radio  " + radioId + ":", e);
+         logger.error("Error connecting radio  " + radioId + ":", e);
       }
 
    }// end of method
@@ -700,7 +706,7 @@
          // invalid input
          else
          {
-            LoggingManager.getPrimaryLogger().error("Can't change radio power mode, invalid radio power mode " + powerMode);
+            logger.error("Can't change radio power mode, invalid radio power mode " + powerMode);
             return;
          }
 
@@ -710,7 +716,7 @@
       }
       catch (Exception e)
       {
-         LoggingManager.getPrimaryLogger().error("Problem with SNMP set ", e);
+         logger.error("Problem with SNMP set ", e);
       }
 
    }
@@ -766,8 +772,7 @@
 
 
    /**
-    * requestScaSyslogArchive
-    * Section A: Date stamping archiving.
+    * requestScaSyslogArchive Section A: Date stamping archiving.
     * 
     * Section B: Instantiate the archive tool.
     * 
@@ -777,13 +782,13 @@
    public void requestScaSyslogArchive()
    {
       // Section A
-      //String pattern = "MM_dd_yyyy_HHmmss";
+      // String pattern = "MM_dd_yyyy_HHmmss";
       String month = "MM";
       String day = "dd";
       String year = "yyyy";
       String hour = "HH";
       String minute = "mm";
-      
+
       SimpleDateFormat formatMonth = new SimpleDateFormat(month);
       SimpleDateFormat formatDay = new SimpleDateFormat(day);
       SimpleDateFormat formatYear = new SimpleDateFormat(year);
@@ -794,7 +799,7 @@
       String linOutYear = formatYear.format(new Date());
       String linOutHour = formatHour.format(new Date());
       String linOutMinute = formatMinute.format(new Date());
-      
+
       // Update nodes
       node.setArchiveToolDateStampMonth(linOutMonth);
       node.setArchiveToolDateStampDay(linOutDay);
@@ -801,33 +806,34 @@
       node.setArchiveToolDateStampYear(linOutYear);
       node.setArchiveToolDateStampHour(linOutHour);
       node.setArchiveToolDateStampMinute(linOutMinute);
-     
+
       // Section B
       VcaSyslogArchiver arch = new VcaSyslogArchiver();
       arch.run();
-      
-      node.setArchiveToolFileCount( arch.countFilesInDirectory());
+
+      node.setArchiveToolFileCount(arch.countFilesInDirectory());
       node.setArchiveToolSpaceAvailable(arch.spaceAvailable());
-       
+
    }
-   
+
+
    public void requestScaSysCleanlogArchive()
    {
-       VcaSyslogArchiver arch = new VcaSyslogArchiver();
-       try
-       {
-           arch.moveFilesToDirectory();
-           // Set status values back to default
-           node.setArchiveToolFileCount( 0 );
-           node.setArchiveToolSpaceAvailable( 100 );
-       }
-       catch (IOException e)
-       {
-        e.printStackTrace();
-       }
-   
+      VcaSyslogArchiver arch = new VcaSyslogArchiver();
+      try
+      {
+         arch.moveFilesToDirectory();
+         // Set status values back to default
+         node.setArchiveToolFileCount(0);
+         node.setArchiveToolSpaceAvailable(100);
+      }
+      catch (IOException e)
+      {
+         e.printStackTrace();
+      }
+
    }
-  
+
    // END Archiving Tool Section
 
 
@@ -836,4 +842,109 @@
       return powerHandler;
    }
 
+
+   @Override
+   public void requestBitStart()
+   {
+      logger.debug("Got request to initialize vehicle BIT process.");
+
+      // Exclude BIT of UUV type vehicle
+      if (node instanceof UuvNode)
+         return;
+
+      // Run in a thread since it can take few minutes to complete
+      MvcsThreads.pool.submit(new Runnable()
+      {
+         @Override
+         public void run()
+         {
+            // execute BIT
+
+            // BIT result message
+            BitResultMessage bitResult = new BitResultMessage(node.getNodeId());
+
+            // Encryptor(s)
+            for (IEncryptorPlugin plugin : VcaEncryptorPluginManager.getInstance().getRuntimeEncryptorPlugins().values())
+            {
+               Ips250Status ips = new Ips250Status();
+               try
+               {
+                  boolean keyed = plugin.isKeyed(); // polling keyed status from encryptor
+                  logger.info("Encryptor[{}] CIK loaded? {} ", plugin.getIPAddress(), keyed);
+                  ips.keyed = keyed;
+               }
+               catch (Exception ex)
+               {
+                  logger.error("Error: ", ex);
+               }
+               
+               ips.redIp = plugin.getIPAddress();
+               ips.reachable = plugin.isReachable();
+               bitResult.ips250s.add(ips);
+            }
+
+            // HAF-100
+            if (filterDeviceHandler != null)
+            {
+               filterDeviceHandler.getStatus(node.getFilterDevice());
+               bitResult.haf100Status = node.getFilterDevice().getStatus();
+            }
+
+            // Radio(s)
+            LinkModel losLink = node.getFirstLinkByCommsType(CommsType.LOS);
+            IRadioPlugin radioPlugin = VcaRadioPluginsManager.getInstance().getRadioPluginByName(losLink.getLinkId());
+            bitResult.losRadioFrequency = radioPlugin.getRadioFrequency();
+
+            // RF switch
+            RFDevice rfDevice = node.getRfDevice(losLink.getLinkId());
+            // toggle ON the TEST port to confirm operation
+            requestRfUnchecked(losLink.getLinkId(), RFOutputType.TEST, true);
+            boolean rfDigitalIO = rfDevice.isOutputting(RFOutputType.TEST);
+            bitResult.rfSwitchStatus = rfDigitalIO;
+            if (rfDigitalIO)
+            {
+               logger.info("BIT could not change RF output to {}", RFOutputType.TEST.displayText);
+            }
+
+            // Power status: no silver bullet to get status other than relying on PowerOutput model.
+            boolean powerDigitalIO = true;
+            ArrayList<PowerOutput> poweredStatus = new ArrayList<PowerOutput>();
+            for (PowerDevice powerDevice : node.getPowerDevices().values())
+            {
+               for (PowerOutput powerOutput : powerDevice.getOutputs().values())
+               {
+                  // try toggle ON the power of all outputs to confirm operation
+                  requestPowerUnchecked(powerOutput.outputId, true);
+                  // output is not turned ON
+                  if (!powerOutput.isOutputting())
+                  {
+                     logger.info("BIT could not power ON the device[{}]", powerOutput.outputId);
+                     powerDigitalIO &= false;
+                  }
+                  // add status
+                  poweredStatus.add(powerOutput);
+               }
+            }
+            bitResult.powerModuleStatus = powerDigitalIO;
+
+            // logging for testing purpose
+            logger.info("BIT result is created for node {} ", bitResult.getNodeId());
+            logger.info("HAF100: " + bitResult.haf100Status);
+            logger.info("LOS Freq: " + bitResult.losRadioFrequency);
+            logger.info("RF Switch: " + bitResult.rfSwitchStatus);
+            logger.info("Power Module: " + bitResult.powerModuleStatus);
+            for (int i = 0; i < bitResult.ips250s.size(); i++)
+            {
+               Ips250Status ips = bitResult.ips250s.get(i);
+               logger.info("IPS IP: " + ips.redIp);
+               logger.info("Reachable: " + ips.reachable);
+               logger.info("Keyed: " + ips.keyed);
+            }
+
+            // send bit result message back to the host for display purpose.
+            messageQueue.add(bitResult);
+         }
+      });
+   }
+
 }
#P mvcs-common
Index: src/main/java/mil/navy/lcs/mvcs/common/handler/IMvcsNodeHandler.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/common/handler/IMvcsNodeHandler.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/common/handler/IMvcsNodeHandler.java	(working copy)
@@ -133,4 +133,8 @@
     */
    void setCourse(double course);
 
+
+   /** To request BIT to start. BIT likely take few minutes to complete. */
+   void requestBitStart();
+
 }
Index: src/main/java/mil/navy/lcs/mvcs/common/messages/BitMessage.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/common/messages/BitMessage.java	(nonexistent)
+++ src/main/java/mil/navy/lcs/mvcs/common/messages/BitMessage.java	(working copy)
@@ -0,0 +1,30 @@
+
+
+package mil.navy.lcs.mvcs.common.messages;
+
+
+/**
+ * Message for BIT starting and stopping.
+ */
+public class BitMessage extends Message
+{
+   private static final long serialVersionUID = 1L;
+
+   private final boolean a1;
+
+
+   public BitMessage( boolean activate)
+   {
+      super(MessageCategory.BIT);
+
+      this.a1 = activate;
+   }
+
+
+   public boolean isActivate()
+   {
+      return a1;
+   }
+
+}
+
Index: src/main/java/mil/navy/lcs/mvcs/common/messages/MessageCategory.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/common/messages/MessageCategory.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/common/messages/MessageCategory.java	(working copy)
@@ -6,6 +6,7 @@
 public enum MessageCategory {
    ALERT, //
    ARCHIVE, // Archiving Tool
+   BIT, //
    CRYPTO, //
    EMCON, //
    INHIBIT, //
Index: src/main/java/mil/navy/lcs/mvcs/common/encryptor/EncryptorPluginManager.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/common/encryptor/EncryptorPluginManager.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/common/encryptor/EncryptorPluginManager.java	(working copy)
@@ -55,9 +55,9 @@
          try
          {
             IPS250EncryptionDevice encryptionDevice = radio.getEncryptionDevice();
-            
-            LoggingManager.getPrimaryLogger().info("Encryption device " +  encryptionDevice +" for radio: " + radio.getLinkId() );
 
+            LoggingManager.getPrimaryLogger().info("Encryption device " + encryptionDevice + " for radio: " + radio.getLinkId());
+
             // Ensure the encryptor type is valid
             if (encryptionDevice == null || encryptionDevice.getTypeId() == null)
                continue;
@@ -74,9 +74,9 @@
 
             // Find the plug-in class name
             String encryptorPlugin = encryptorPluginClassNames.get(encryptionDevice.getTypeId());
-            
-            LoggingManager.getPrimaryLogger().info("Encryptor redIp: " + redIp + ", className: " + encryptorPlugin );
 
+            LoggingManager.getPrimaryLogger().info("Encryptor redIp: " + redIp + ", className: " + encryptorPlugin);
+
             // Ensure the plug-in class name is valid
             if (encryptorPlugin == null)
             {
@@ -128,6 +128,17 @@
 
       return null;
    }
-   
 
+
+   /**
+    * To get the runtime encryptor plugins
+    * 
+    * @return the encryptor plugins
+    */
+   public Hashtable<String, IEncryptorPlugin> getRuntimeEncryptorPlugins()
+   {
+      return this.runtimeEncryptorPlugins;
+   }
+
+
 }
\ No newline at end of file
Index: src/main/java/mil/navy/lcs/mvcs/common/messages/BitResultMessage.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/common/messages/BitResultMessage.java	(nonexistent)
+++ src/main/java/mil/navy/lcs/mvcs/common/messages/BitResultMessage.java	(working copy)
@@ -0,0 +1,48 @@
+
+
+package mil.navy.lcs.mvcs.common.messages;
+
+import java.util.ArrayList;
+
+/**
+ * Message for BIT result.
+ */
+public class BitResultMessage extends Message
+{
+   private static final long serialVersionUID = 1L;
+
+   private final String nodeId;
+
+   public String haf100Status = "DOWN";
+
+   public String losRadioFrequency = "";
+   
+   public boolean rfSwitchStatus = false;
+   
+   public boolean powerModuleStatus = false;
+   
+   public ArrayList<Ips250Status> ips250s = new ArrayList<Ips250Status>();
+
+
+   public BitResultMessage( String nodeId)
+   {
+      super(MessageCategory.BIT);
+
+      this.nodeId = nodeId;
+   }
+
+
+   public String getNodeId()
+   {
+      return nodeId;
+   }
+
+   public static class Ips250Status
+   {
+      public String redIp = "";
+      public boolean reachable = false;
+      public boolean keyed = false;
+   }
+   
+}
+
