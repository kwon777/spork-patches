Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/BitComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/BitComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/BitComponentData.java	(working copy)
@@ -1,77 +1,12 @@
 package mil.navy.lcs.mvcs.sca.bit;
 
 
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-
-import java.io.IOException;
-import java.util.Hashtable;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.TimeUnit;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import javax.swing.JOptionPane;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.ImmutableMap;
-import com.ireasoning.protocol.TimeoutException;
-import com.ireasoning.protocol.snmp.SnmpConst;
-
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
-import mil.navy.lcs.mvcs.common.config.exception.ConfigException;
-import mil.navy.lcs.mvcs.common.config.model.Channel;
-import mil.navy.lcs.mvcs.common.config.model.CircuitBreaker;
-import mil.navy.lcs.mvcs.common.config.model.CredentialSimple;
-import mil.navy.lcs.mvcs.common.config.model.CredentialSnmp;
-import mil.navy.lcs.mvcs.common.config.model.CrossDomain;
-import mil.navy.lcs.mvcs.common.config.model.Encrypter;
-import mil.navy.lcs.mvcs.common.config.model.MatrixSwitch;
-import mil.navy.lcs.mvcs.common.config.model.PowerUps;
-import mil.navy.lcs.mvcs.common.config.model.Radio;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
-import mil.navy.lcs.mvcs.common.encryptor.EncryptorPluginManager;
-import mil.navy.lcs.mvcs.common.encryptor.interfaces.IEncryptorPlugin;
-import mil.navy.lcs.mvcs.common.hardware.HardwareManager;
-import mil.navy.lcs.mvcs.common.log.LoggingManager;
-import mil.navy.lcs.mvcs.common.misc.ConstantValues;
-import mil.navy.lcs.mvcs.common.misc.serialUtilities.SerialComms;
-import mil.navy.lcs.mvcs.common.node.PowerOutputData;
-import mil.navy.lcs.mvcs.iface.filter.FilterDevice;
-import mil.navy.lcs.mvcs.iface.filter.FilterStatus;
-import mil.navy.lcs.mvcs.iface.model.node.CommsType;
-import mil.navy.lcs.mvcs.iface.model.node.LinkModel;
-import mil.navy.lcs.mvcs.iface.model.node.MvcsLinkType;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.RadioLink;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
-import mil.navy.lcs.mvcs.iface.power.IPowerDeviceHandler;
-import mil.navy.lcs.mvcs.iface.power.PowerDevice;
-import mil.navy.lcs.mvcs.iface.power.PowerOutput;
-import mil.navy.lcs.mvcs.iface.power.PowerOutputType;
-import mil.navy.lcs.mvcs.iface.rf.RFDevice;
-import mil.navy.lcs.mvcs.iface.rf.RFOutputType;
-import mil.navy.lcs.mvcs.iface.safety.MvcsSafetyException;
-import mil.navy.lcs.mvcs.iface.status.Status;
-import mil.navy.lcs.mvcs.iface.status.StatusItem;
-import mil.navy.lcs.mvcs.sca.encryptor.ScaEncryptorPluginManager;
-import mil.navy.lcs.mvcs.sca.filter.ScaFilterDeviceHandler;
-import mil.navy.lcs.mvcs.sca.main.ShipState;
-import mil.navy.lcs.mvcs.sca.node.handler.ShipHandlerBuilder;
-import mil.navy.lcs.mvcs.sca.power.IMideasternComms;
-import mil.navy.lcs.mvcs.sca.power.MideasternTestComms;
-import mil.navy.lcs.mvcs.sca.power.PowerDeviceHandler_28VMidEastern;
-import mil.navy.lcs.mvcs.sca.powerUps.UpsHardwareData;
-import mil.navy.lcs.mvcs.sca.powerUps.UpsManager;
-import mil.navy.lcs.mvcs.sca.radios.ScaRadioPluginsManager;
-import mil.navy.lcs.mvcs.sca.snmp.ScaSnmpManager;
-import mil.navy.lcs.mvcs.sca.snmp.agent.workers.MvcsTableWorker;
-import mil.navy.lcs.mvcs.sca.snmp.agent.workers.RadioTableWorker;
 
 public class BitComponentData {
 	private final MvcsNode node;
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/EncryptorComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/EncryptorComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/EncryptorComponentData.java	(working copy)
@@ -7,7 +7,6 @@
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
 import mil.navy.lcs.mvcs.iface.model.node.CommsType;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 
 public class EncryptorComponentData {
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/Haf100ComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/Haf100ComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/Haf100ComponentData.java	(working copy)
@@ -8,8 +8,6 @@
 import mil.navy.lcs.mvcs.iface.filter.FilterDevice;
 import mil.navy.lcs.mvcs.iface.filter.IFilterDeviceHandler;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
-import mil.navy.lcs.mvcs.sca.filter.ScaFilterDeviceHandler;
 
 public class Haf100ComponentData {
 	private final MvcsNode node;
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/RadioComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/RadioComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/RadioComponentData.java	(working copy)
@@ -5,15 +5,12 @@
 
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
-import mil.navy.lcs.mvcs.common.misc.ConstantValues;
 import mil.navy.lcs.mvcs.iface.model.node.CommsType;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
 import mil.navy.lcs.mvcs.iface.model.node.RadioLink;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.iface.power.PowerDevice;
 import mil.navy.lcs.mvcs.iface.power.PowerOutput;
 import mil.navy.lcs.mvcs.iface.rf.RFOutputType;
-import mil.navy.lcs.mvcs.sca.bit.BitConstants;
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 import mil.navy.lcs.mvcs.sca.snmp.agent.workers.RadioTableWorker;
 
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/UpsComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/UpsComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/UpsComponentData.java	(working copy)
@@ -6,11 +6,7 @@
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
 import mil.navy.lcs.mvcs.common.config.model.PowerUps;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
-import mil.navy.lcs.mvcs.common.log.LoggingManager;
-import mil.navy.lcs.mvcs.common.misc.serialUtilities.SerialComms;
-import mil.navy.lcs.mvcs.common.misc.serialUtilities.SerialReceivedDataListenerInterface;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.sca.powerUps.UpsHardwareData;
 import mil.navy.lcs.mvcs.sca.powerUps.UpsManager;
 
Index: src/main/java/mil/navy/lcs/mvcs/sca/bit/Vdc28ComponentData.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/bit/Vdc28ComponentData.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/bit/Vdc28ComponentData.java	(working copy)
@@ -1,8 +1,5 @@
 package mil.navy.lcs.mvcs.sca.bit;
 
-import java.util.LinkedList;
-import java.util.List;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -9,14 +6,12 @@
 import mil.navy.lcs.mvcs.common.config.ConfigManager;
 import mil.navy.lcs.mvcs.common.config.model.VesselCommon;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.iface.power.IPowerDeviceHandler;
 import mil.navy.lcs.mvcs.iface.power.PowerDevice;
 import mil.navy.lcs.mvcs.iface.power.PowerOutput;
+import mil.navy.lcs.mvcs.sca.main.ShipState;
 import mil.navy.lcs.mvcs.sca.power.IMideasternComms;
 import mil.navy.lcs.mvcs.sca.power.PowerDeviceHandler_28VMidEastern;
-import mil.navy.lcs.mvcs.sca.bit.BitConstants;
-import mil.navy.lcs.mvcs.sca.main.ShipState;
 
 public class Vdc28ComponentData {
 	private final MvcsNode node;
Index: src/main/java/mil/navy/lcs/mvcs/sca/cnc/NodeStatusUpdater.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/cnc/NodeStatusUpdater.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/cnc/NodeStatusUpdater.java	(working copy)
@@ -3,11 +3,14 @@
 package mil.navy.lcs.mvcs.sca.cnc;
 
 
+import java.util.ArrayList;
 import java.util.Map;
 
 import mil.navy.lcs.mvcs.common.log.LoggingManager;
 import mil.navy.lcs.mvcs.common.messages.ActiveLinkMessage;
 import mil.navy.lcs.mvcs.common.messages.AlertMessage;
+import mil.navy.lcs.mvcs.common.messages.BitResultMessage;
+import mil.navy.lcs.mvcs.common.messages.BitResultMessage.Ips250Status;
 import mil.navy.lcs.mvcs.common.messages.CryptoMessage;
 import mil.navy.lcs.mvcs.common.messages.EmconMessage;
 import mil.navy.lcs.mvcs.common.messages.InhibitMessage;
@@ -40,6 +43,7 @@
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 
 import com.google.common.collect.Maps;
+import com.ireasoning.util.Logger;
 
 /**
  * This class is responsible for updating vehicle nodes when messages are generated and received
@@ -315,6 +319,29 @@
    };
 
 
+   private final IMessageProcessor bitResultProcessor = new IMessageProcessor()
+   {
+      @Override
+      public void process(Message message)
+      {
+         BitResultMessage brm = (BitResultMessage) message;
+         LoggingManager.getPrimaryLogger().info("BIT result has arrived from node {} ", brm.getNodeId());
+         LoggingManager.getPrimaryLogger().info("HAF100: " + brm.haf100Status);
+         LoggingManager.getPrimaryLogger().info("LOS Freq: " + brm.losRadioFrequency);
+         LoggingManager.getPrimaryLogger().info("RF Switch: " + brm.rfSwitchStatus);
+         LoggingManager.getPrimaryLogger().info("Power Module: " + brm.powerModuleStatus);
+         for (int i = 0; i < brm.ips250s.size(); i++)
+         {
+            Ips250Status ips = brm.ips250s.get(i);
+            LoggingManager.getPrimaryLogger().info("IPS-250  IP: " + ips.redIp);
+            LoggingManager.getPrimaryLogger().info("         Reachable: " + ips.reachable);
+            LoggingManager.getPrimaryLogger().info("         Keyed: " + ips.keyed);
+         }
+
+      }
+   };
+
+
    /**
     * Initializes NodeStatusUpdater by registering for property change support.
     * 
@@ -344,5 +371,6 @@
       mr.register(AlertMessage.class, alertProcessor);
       mr.register(LinkPriorityMessage.class, linkPriorityProcessor);
       mr.register(LinkSwitchResultMessage.class, linkSwitchResultProcessor);
+      mr.register(BitResultMessage.class, bitResultProcessor);
    }
 }
Index: src/main/java/mil/navy/lcs/mvcs/sca/main/MvcsRemoteEngine.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/main/MvcsRemoteEngine.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/main/MvcsRemoteEngine.java	(working copy)
@@ -279,6 +279,7 @@
       handler.requestZeroize();
    }
 
+
    @Override
    public void requestTestOverRfTestPort(String nodeId, String linkId, String rfOutputType, boolean on) throws RemoteException
    {
@@ -385,63 +386,67 @@
          logger.error("Error Archiving Syslog files: ", e);
       }
    }
-   
+
+
    @Override
-	public void requestArchiveCleanLogFiles(String nodeId, boolean active, int duration) throws RemoteException
-	{
-		try
-	    {
-	       // Section A
-	       if (nodeId.equals("100"))
-	       {
-	          MvcsNode node = ShipState.model.getNode(nodeId);
-	          ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
-	          handler.requestScaSysCleanlogArchive();
-	       }
-	       
-	    }
-	    catch (Exception e)
-	    {
-	       logger.error("Error Archiving Syslog files: ", e);
-	    }
-		
-	}
+   public void requestArchiveCleanLogFiles(String nodeId, boolean active, int duration) throws RemoteException
+   {
+      try
+      {
+         // Section A
+         if (nodeId.equals("100"))
+         {
+            MvcsNode node = ShipState.model.getNode(nodeId);
+            ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
+            handler.requestScaSysCleanlogArchive();
+         }
 
+      }
+      catch (Exception e)
+      {
+         logger.error("Error Archiving Syslog files: ", e);
+      }
 
-@Override
-public void requestBitStatus(String nodeId, boolean active, int duration) throws RemoteException {
-	try
-    {
-       // Section A
-       if (nodeId.equals("100"))
-       {
-          MvcsNode node = ShipState.model.getNode(nodeId);
-          ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
-          handler.requestBitStatus();
-       }
-    }
-    catch (Exception e)
-    {
-       logger.error("Error Fetching PM/FL Data", e);
-    }
-}
+   }
 
-@Override
-public void requestKeyingToolStatus(String nodeId, boolean active, int duration) throws RemoteException {
-	try
-    {
-       // Section A
-       if (nodeId.equals("100"))
-       {
-          MvcsNode node = ShipState.model.getNode(nodeId);
-          ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
-          handler.requestBitStatus();
-       }
-    }
-    catch (Exception e)
-    {
-       logger.error("Error Fetching PM/FL Data", e);
-    }
-}
 
+   /**
+    * To request BIT status for the shipboard node or a remote vehicle node.
+    * 
+    * @param nodeId - the ID of node for BIT
+    * @param active - start if true
+    * @param duration - the duration in seconds
+    * @throws RemoteException
+    */
+   @Override
+   public void requestBitStatus(String nodeId, boolean active, int duration) throws RemoteException
+   {
+      try
+      {
+         MvcsNode node = ShipState.model.getNode(nodeId);
+         //ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
+         IMvcsNodeHandler handler = ShipState.getNodeHandler(node);
+         handler.requestBitStart();
+      }
+      catch (Exception e)
+      {
+         logger.error("Error Fetching PM/FL Status.", e);
+      }
+   }
+
+
+   @Override
+   public void requestKeyingToolStatus(String nodeId, boolean active, int duration) throws RemoteException
+   {
+      try
+      {
+         MvcsNode node = ShipState.model.getNode(nodeId);
+         ShipNodeHandler handler = (ShipNodeHandler) ShipState.getNodeHandler(node);
+      }
+      catch (Exception e)
+      {
+         logger.error("Error Fetching KeyingTool Status.", e);
+      }
+   }
+
 }// END Class MvcsRemoteEngine
\ No newline at end of file
Index: src/main/java/mil/navy/lcs/mvcs/sca/node/handler/ShipNodeHandler.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/node/handler/ShipNodeHandler.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/node/handler/ShipNodeHandler.java	(working copy)
@@ -6,9 +6,7 @@
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.io.IOException;
-import java.text.SimpleDateFormat;
 import java.util.Comparator;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.List;
@@ -25,8 +23,6 @@
 import com.google.common.collect.ImmutableList;
 
 import mil.navy.lcs.mvcs.common.handler.IMvcsNodeHandler;
-import mil.navy.lcs.mvcs.common.link.utils.Dates;
-import mil.navy.lcs.mvcs.sca.utils.DateUtils;
 import mil.navy.lcs.mvcs.common.radios.interfaces.IRadioPlugin;
 import mil.navy.lcs.mvcs.iface.alerts.AlertType;
 import mil.navy.lcs.mvcs.iface.alerts.AlertsManager;
@@ -52,12 +48,10 @@
 import mil.navy.lcs.mvcs.sca.archiver.ScaSyslogArchiver;
 import mil.navy.lcs.mvcs.sca.bit.EncryptorComponentData;
 import mil.navy.lcs.mvcs.sca.bit.Haf100ComponentData;
-import mil.navy.lcs.mvcs.sca.bit.BitComponentData;
 import mil.navy.lcs.mvcs.sca.bit.RadioComponentData;
 import mil.navy.lcs.mvcs.sca.bit.UpsComponentData;
 import mil.navy.lcs.mvcs.sca.bit.Vdc28ComponentData;
 import mil.navy.lcs.mvcs.sca.encryptor.ScaEncryptorPluginManager;
-import mil.navy.lcs.mvcs.sca.keyingTool.AuthenticateKeyingTool;
 import mil.navy.lcs.mvcs.sca.keyingTool.KeyingTool;
 import mil.navy.lcs.mvcs.sca.link.ScaLinkManager;
 import mil.navy.lcs.mvcs.sca.link.path.ScaRadioController;
@@ -65,6 +59,7 @@
 import mil.navy.lcs.mvcs.sca.main.ShipState;
 import mil.navy.lcs.mvcs.sca.radios.ScaRadioPluginsManager;
 import mil.navy.lcs.mvcs.sca.rf.OTHAntennaAutomation;
+import mil.navy.lcs.mvcs.sca.utils.DateUtils;
 
 /**
  * This class is responsible to handle requests for MVCS ship node.
@@ -715,8 +710,7 @@
 
 
    /**
-    * requestScaSyslogArchive
-    * Section A: Date stamping archiving.
+    * requestScaSyslogArchive Section A: Date stamping archiving.
     *
     * Section B: Instantiate the archive tool.
     *
@@ -725,122 +719,126 @@
     */
    public void requestScaSyslogArchive()
    {
-    // Section A
-	// Update Date Stamp Nodes
-	  DateUtils date = new DateUtils();
-      node.setBitDateStamp( date.getDate() );
-	  node.setArchiveToolDateStampMonth( date.getMonth() );
-      node.setArchiveToolDateStampDay( date.getDay() );
-      node.setArchiveToolDateStampYear( date.getYear() );
-      node.setArchiveToolDateStampHour( date.getHour() );
-      node.setArchiveToolDateStampMinute( date.getMinute() );
+      // Section A
+      // Update Date Stamp Nodes
+      DateUtils date = new DateUtils();
+      node.setBitDateStamp(date.getDate());
+      node.setArchiveToolDateStampMonth(date.getMonth());
+      node.setArchiveToolDateStampDay(date.getDay());
+      node.setArchiveToolDateStampYear(date.getYear());
+      node.setArchiveToolDateStampHour(date.getHour());
+      node.setArchiveToolDateStampMinute(date.getMinute());
 
       // Section B
       ScaSyslogArchiver arch = new ScaSyslogArchiver();
       arch.run();
 
-      node.setArchiveToolFileCount( arch.countFilesInDirectory());
+      node.setArchiveToolFileCount(arch.countFilesInDirectory());
       node.setArchiveToolSpaceAvailable(arch.spaceAvailable());
 
-      new KeyingTool( node );
+      new KeyingTool(node);
 
 
    }
 
+
    public void requestScaSysCleanlogArchive()
    {
-	   ScaSyslogArchiver arch = new ScaSyslogArchiver();
-	   try
-	   {
-		   arch.deleteDirectoryFiles();
-		   // Set status values back to default
-		   node.setArchiveToolFileCount( 0 );
-		   node.setArchiveToolSpaceAvailable( 100 );
-	   }
-	   catch (IOException e)
-	   {
-		   e.printStackTrace();
-	   }
+      ScaSyslogArchiver arch = new ScaSyslogArchiver();
+      try
+      {
+         arch.deleteDirectoryFiles();
+         // Set status values back to default
+         node.setArchiveToolFileCount(0);
+         node.setArchiveToolSpaceAvailable(100);
+      }
+      catch (IOException e)
+      {
+         e.printStackTrace();
+      }
 
    }
 
+
    // END Archiving Tool Section
 
    /**
     *
-    * requestBitStatus
+    * To request BIT to start and populate the node with results once they are completed. This is
+    * where we are going to pull our custom bit class data through for the ship side.
     *
-    * This is where we are going to pull our custom bit class data through for the ship side
-    *
     */
-   public void requestBitStatus()
+   public void requestBitStart()
    {
-	   RadioComponentData radioData = new RadioComponentData(node);
-	   Haf100ComponentData haf100Data = new Haf100ComponentData(node);
-	   UpsComponentData upsData = new UpsComponentData(node);
-	   EncryptorComponentData encryptorData = new EncryptorComponentData(node);
-	   Vdc28ComponentData vdc28Data = new Vdc28ComponentData(node);
-	   																		 
-	   node.setHaf100Status(haf100Data.pollHaf100OverallStatus(), haf100Data.haf100OverallGIF());
-	   node.setHaf100Powered(haf100Data.polHaf100Status());
-	   
-	   node.setPrc117Powered(radioData.prc117PowerStatus(), radioData.getColorForPRC117PowerText());
-	   node.setPrc117Link(radioData.prc117LinkStatus());
-	   //node.setPrc117Rim(radioData.prc117RimStatus());
-	   
-	   node.setPrc117Amp(radioData.prc117AmpStatus(), radioData.getColorForPRC117AmpText());
-	   node.setRt1944Powered(radioData.rt1944PowerStatus(), radioData.getColorForRt1944PowerText());
-	   node.setRt1944Link(radioData.rt1944LinkStatus());
-	   //node.setRt1944Rim(radioData.rt1944RimStatus());
-	   
-	   node.setRt1944Amp(radioData.rt1944AmpStatus(), radioData.getColorForAmp1Text());
-	   node.setRt1944Amp2(radioData.rt1944Amp2Status(), radioData.getColorForAmp2Text());
-	   radioData.powerDevicesStatusCounter();
-	   node.setMcg101Powered(radioData.mcg101PowerStatus());
-	   node.setMcg101Link(radioData.mcg101LinkStatus());
-	   node.set28VdcPowered(vdc28Data.powerSupply28VDC());
-	   node.setCircuitBreaker1Status(vdc28Data.circuitBreakerStatus(0), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker2Status(vdc28Data.circuitBreakerStatus(1), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker3Status(vdc28Data.circuitBreakerStatus(2), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker4Status(vdc28Data.circuitBreakerStatus(3), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker5Status(vdc28Data.circuitBreakerStatus(4), vdc28Data.getColorForBreaker());
-	   node.setCircuitBreaker7Status(vdc28Data.circuitBreakerStatus(5), vdc28Data.getColorForBreaker());
-	   node.setUpsPowered(upsData.upsPowerStatus());
-	   node.setUpsInverterStatus(upsData.upsBatteryStatus());
-	   node.setUpsBatteryStatus(upsData.upsBatteryStatus());
-	   node.setUpsStatus(upsData.upsOverallStatus(), upsData.upsGIF());
-	   
-	   node.setIps250Keyed(encryptorData.ips250KeyedStatus());
-	   node.setIps250LosActive(encryptorData.ips250KeyingLosActive());
-	   node.setIps250OthActive(encryptorData.ips250KeyingOthActive());
-	   node.setIps250Status(encryptorData.ips250OverallStatus(), encryptorData.ips250GIF());
+      RadioComponentData radioData = new RadioComponentData(node);
+      Haf100ComponentData haf100Data = new Haf100ComponentData(node);
+      UpsComponentData upsData = new UpsComponentData(node);
+      EncryptorComponentData encryptorData = new EncryptorComponentData(node);
+      Vdc28ComponentData vdc28Data = new Vdc28ComponentData(node);
 
-	   node.setMatrixSwitchStatus(radioData.matrixSwitchOverallStatus(), radioData.matrixSwitchGIF());
-	   
-	   node.setRt1944Status(radioData.rt1944OverallStatus(), radioData.rt1944GIF());
-	   node.setPrc117Status(radioData.prc117OverallStatus(), radioData.prc117GIF());
-	   node.setMcg101Status(radioData.mcg101OverallStatus(), radioData.mcg101GIF());
-	   node.set28VdcStatus(vdc28Data.vdc28OverallStatus(), vdc28Data.vdc28GIF());
+      node.setHaf100Status(haf100Data.pollHaf100OverallStatus(), haf100Data.haf100OverallGIF());
+      node.setHaf100Powered(haf100Data.polHaf100Status());
 
-	   DateUtils date = new DateUtils();
-	   node.setBitDateStamp( date.getDate() );
-	   node.setBitDateStampMonth( date.getMonth() );
-	   node.setBitDateStampDay( date.getDay() );
-	   node.setBitDateStampYear( date.getYear() );
-	   node.setBitDateStampHour( date.getHour() );
-	   node.setBitDateStampMinute( date.getMinute() );
+      node.setPrc117Powered(radioData.prc117PowerStatus(), radioData.getColorForPRC117PowerText());
+      node.setPrc117Link(radioData.prc117LinkStatus());
+      // node.setPrc117Rim(radioData.prc117RimStatus());
+
+      node.setPrc117Amp(radioData.prc117AmpStatus(), radioData.getColorForPRC117AmpText());
+      node.setRt1944Powered(radioData.rt1944PowerStatus(), radioData.getColorForRt1944PowerText());
+      node.setRt1944Link(radioData.rt1944LinkStatus());
+      // node.setRt1944Rim(radioData.rt1944RimStatus());
+
+      node.setRt1944Amp(radioData.rt1944AmpStatus(), radioData.getColorForAmp1Text());
+      node.setRt1944Amp2(radioData.rt1944Amp2Status(), radioData.getColorForAmp2Text());
+      radioData.powerDevicesStatusCounter();
+      node.setMcg101Powered(radioData.mcg101PowerStatus());
+      node.setMcg101Link(radioData.mcg101LinkStatus());
+      node.set28VdcPowered(vdc28Data.powerSupply28VDC());
+      node.setCircuitBreaker1Status(vdc28Data.circuitBreakerStatus(0), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker2Status(vdc28Data.circuitBreakerStatus(1), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker3Status(vdc28Data.circuitBreakerStatus(2), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker4Status(vdc28Data.circuitBreakerStatus(3), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker5Status(vdc28Data.circuitBreakerStatus(4), vdc28Data.getColorForBreaker());
+      node.setCircuitBreaker7Status(vdc28Data.circuitBreakerStatus(5), vdc28Data.getColorForBreaker());
+      node.setUpsPowered(upsData.upsPowerStatus());
+      node.setUpsInverterStatus(upsData.upsBatteryStatus());
+      node.setUpsBatteryStatus(upsData.upsBatteryStatus());
+      node.setUpsStatus(upsData.upsOverallStatus(), upsData.upsGIF());
+
+      node.setIps250Keyed(encryptorData.ips250KeyedStatus());
+      node.setIps250LosActive(encryptorData.ips250KeyingLosActive());
+      node.setIps250OthActive(encryptorData.ips250KeyingOthActive());
+      node.setIps250Status(encryptorData.ips250OverallStatus(), encryptorData.ips250GIF());
+
+      node.setMatrixSwitchStatus(radioData.matrixSwitchOverallStatus(), radioData.matrixSwitchGIF());
+
+      node.setRt1944Status(radioData.rt1944OverallStatus(), radioData.rt1944GIF());
+      node.setPrc117Status(radioData.prc117OverallStatus(), radioData.prc117GIF());
+      node.setMcg101Status(radioData.mcg101OverallStatus(), radioData.mcg101GIF());
+      node.set28VdcStatus(vdc28Data.vdc28OverallStatus(), vdc28Data.vdc28GIF());
+
+      DateUtils date = new DateUtils();
+      node.setBitDateStamp(date.getDate());
+      node.setBitDateStampMonth(date.getMonth());
+      node.setBitDateStampDay(date.getDay());
+      node.setBitDateStampYear(date.getYear());
+      node.setBitDateStampHour(date.getHour());
+      node.setBitDateStampMinute(date.getMinute());
    }
 
-   public void requestRTCSync() {
-	   DateUtils date = new DateUtils();
-	   node.setRTCDateStamp( date.getDate() );
-	   node.setRTCDateStampMonth( date.getMonth() );
-	   node.setRTCDateStampDay( date.getDay() );
-	   node.setRTCDateStampYear( date.getYear() );
-	   node.setRTCDateStampHour( date.getHour() );
-	   node.setRTCDateStampMinute( date.getMinute() );
+
+   public void requestRTCSync()
+   {
+      DateUtils date = new DateUtils();
+      node.setRTCDateStamp(date.getDate());
+      node.setRTCDateStampMonth(date.getMonth());
+      node.setRTCDateStampDay(date.getDay());
+      node.setRTCDateStampYear(date.getYear());
+      node.setRTCDateStampHour(date.getHour());
+      node.setRTCDateStampMinute(date.getMinute());
    }
 
+
    /**
     *
     * To change antenna override mode.
Index: src/main/java/mil/navy/lcs/mvcs/sca/node/handler/VehicleNodeHandler.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/node/handler/VehicleNodeHandler.java	(revision 9922)
+++ src/main/java/mil/navy/lcs/mvcs/sca/node/handler/VehicleNodeHandler.java	(working copy)
@@ -18,6 +18,7 @@
 import mil.navy.lcs.mvcs.common.log.LoggingManager;
 import mil.navy.lcs.mvcs.common.messages.AcknowledgementMessage;
 import mil.navy.lcs.mvcs.common.messages.ArchiveMessage;
+import mil.navy.lcs.mvcs.common.messages.BitMessage;
 import mil.navy.lcs.mvcs.common.messages.EmconMessage;
 import mil.navy.lcs.mvcs.common.messages.LinkConfigureMessage;
 import mil.navy.lcs.mvcs.common.messages.Message;
@@ -316,7 +317,6 @@
    }
 
 
-
    /**
     * To request use the given link as the primary link of vehicle.
     * 
@@ -343,6 +343,7 @@
       }
    }
 
+
    /**
     * To request change of vehicle power conservation mode
     * 
@@ -828,5 +829,13 @@
    }// end of inner class (FrequencyChangeListener)
 
 
+   @Override
+   public void requestBitStart()
+   {
+      logger.debug("BIT start has requested for node:{}", node.getNodeId());
+      messageQueue.add(new BitMessage(true));
+      //TODO need to process acknowledgement?
+   }
 
+
 }// end of class
Index: src/main/test/mil/navy/lcs/mvcs/sca/model/TestMvcsShipNodeHandler.java
===================================================================
--- src/main/test/mil/navy/lcs/mvcs/sca/model/TestMvcsShipNodeHandler.java	(revision 9922)
+++ src/main/test/mil/navy/lcs/mvcs/sca/model/TestMvcsShipNodeHandler.java	(working copy)
@@ -15,8 +15,6 @@
    @Override
    public void requestEmcon(boolean emcon, long duration)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -23,8 +21,6 @@
    @Override
    public void requestPower(String outputName, boolean active) throws MvcsSafetyException
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -31,8 +27,6 @@
    @Override
    public void requestPowerAll(boolean powerAll)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -39,8 +33,6 @@
    @Override
    public void requestPowerUnchecked(String outputName, boolean active)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -47,8 +39,6 @@
    @Override
    public void requestRf(String linkId, RFOutputType rfOutputType, boolean active) throws MvcsSafetyException
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -55,8 +45,6 @@
    @Override
    public void requestRfUnchecked(String linkId, RFOutputType rfOutputType, boolean active)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -63,15 +51,11 @@
    @Override
    public void requestShutdown(ExitAction exitAction)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
    public void requestTransmitAllowed(boolean transmitAllowed)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -78,8 +62,6 @@
    @Override
    public void requestZeroize()
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -86,8 +68,6 @@
    @Override
    public void setGpsLatitude(double latitude)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -94,8 +74,6 @@
    @Override
    public void setSpeed(double speed)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -102,8 +80,6 @@
    @Override
    public void setBearing(double bearing)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -110,8 +86,6 @@
    @Override
    public void setGpsLongitude(double longitude)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
@@ -118,21 +92,16 @@
    @Override
    public void setCourse(double course)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
    public void requestEmconDuration(long duration)
    {
-      // TODO Auto-generated method stub
-
    }
 
 
    public void requestRadioFrequencyChange(String radioId, String frequency)
    {
-      // TODO Auto-generated method stub
 
    }
 
@@ -142,4 +111,10 @@
    {
    }
 
+
+   @Override
+   public void requestBitStart()
+   {
+   }
+
 }
