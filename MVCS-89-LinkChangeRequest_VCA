diff --git a/mvcs-common/.settings/oracle.eclipse.tools.webtier.ui.prefs b/mvcs-common/.settings/oracle.eclipse.tools.webtier.ui.prefs
deleted file mode 100644
index d8a93f2..0000000
--- a/mvcs-common/.settings/oracle.eclipse.tools.webtier.ui.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-_hiddenCategory_\:HTML=false
-eclipse.preferences.version=1
diff --git a/mvcs-common/src/main/java/mil/navy/lcs/mvcs/common/messages/LinkSwitchMessage.java b/mvcs-common/src/main/java/mil/navy/lcs/mvcs/common/messages/LinkSwitchMessage.java
index 2aeae2a..9370cf4 100644
--- a/mvcs-common/src/main/java/mil/navy/lcs/mvcs/common/messages/LinkSwitchMessage.java
+++ b/mvcs-common/src/main/java/mil/navy/lcs/mvcs/common/messages/LinkSwitchMessage.java
@@ -18,6 +18,13 @@
       this.l1 = linkId;
    }
 
+   
+   public LinkSwitchMessage( String linkId, AcknowledgmentCategory ackCategory)
+   {
+      super(MessageCategory.LINK_ACTION, ackCategory);
+      this.l1 = linkId;
+   }
+
 
    public String getLinkId()
    {
diff --git a/mvcs-vca/.settings/org.eclipse.jdt.core.prefs b/mvcs-vca/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index b3e1ee6..0000000
--- a/mvcs-vca/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,275 +0,0 @@
-#Wed Sep 14 15:20:30 PDT 2011
-eclipse.preferences.version=1
-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=0
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_assignment=0
-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80
-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0
-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_after_package=2
-org.eclipse.jdt.core.formatter.blank_lines_before_field=0
-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=0
-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
-org.eclipse.jdt.core.formatter.blank_lines_before_method=2
-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1
-org.eclipse.jdt.core.formatter.blank_lines_before_package=2
-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
-org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=2
-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=next_line
-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block=next_line
-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=next_line
-org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=next_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=next_line
-org.eclipse.jdt.core.formatter.brace_position_for_switch=next_line
-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=next_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
-org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.comment.format_header=true
-org.eclipse.jdt.core.formatter.comment.format_html=true
-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
-org.eclipse.jdt.core.formatter.comment.format_line_comments=true
-org.eclipse.jdt.core.formatter.comment.format_source_code=true
-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
-org.eclipse.jdt.core.formatter.comment.line_length=100
-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
-org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
-org.eclipse.jdt.core.formatter.compact_else_if=true
-org.eclipse.jdt.core.formatter.continuation_indentation=3
-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=3
-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_empty_lines=false
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
-org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.join_lines_in_comments=true
-org.eclipse.jdt.core.formatter.join_wrapped_lines=true
-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.lineSplit=9999
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=2
-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
-org.eclipse.jdt.core.formatter.tabulation.char=space
-org.eclipse.jdt.core.formatter.tabulation.size=3
-org.eclipse.jdt.core.formatter.use_on_off_tags=false
-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/mvcs-vca/.settings/org.eclipse.jdt.ui.prefs b/mvcs-vca/.settings/org.eclipse.jdt.ui.prefs
deleted file mode 100644
index efd208d..0000000
--- a/mvcs-vca/.settings/org.eclipse.jdt.ui.prefs
+++ /dev/null
@@ -1,3 +0,0 @@
-eclipse.preferences.version=1
-formatter_profile=_Gregs
-formatter_settings_version=12
diff --git a/mvcs-vca/src/main/java/mil/navy/lcs/mvcs/vca/snmp/agent/workers/VehicleTableWorker.java b/mvcs-vca/src/main/java/mil/navy/lcs/mvcs/vca/snmp/agent/workers/VehicleTableWorker.java
index 9e87169..52e99a8 100644
--- a/mvcs-vca/src/main/java/mil/navy/lcs/mvcs/vca/snmp/agent/workers/VehicleTableWorker.java
+++ b/mvcs-vca/src/main/java/mil/navy/lcs/mvcs/vca/snmp/agent/workers/VehicleTableWorker.java
@@ -1,1019 +1,1027 @@
-
-
-package mil.navy.lcs.mvcs.vca.snmp.agent.workers;
-
-
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import mil.navy.lcs.mvcs.common.config.ConfigManager;
-import mil.navy.lcs.mvcs.common.config.model.Radio;
-import mil.navy.lcs.mvcs.common.config.model.Vehicle;
-import mil.navy.lcs.mvcs.common.log.LoggingManager;
-import mil.navy.lcs.mvcs.common.messages.LinkSwitchMessage;
-import mil.navy.lcs.mvcs.common.misc.ConstantValues;
-import mil.navy.lcs.mvcs.common.utils.VehicleTableUtil;
-import mil.navy.lcs.mvcs.iface.app.ExitAction;
-import mil.navy.lcs.mvcs.iface.model.node.CommsType;
-import mil.navy.lcs.mvcs.iface.model.node.ConstantValues.LinkSwitchAck;
-import mil.navy.lcs.mvcs.iface.model.node.LinkModel;
-import mil.navy.lcs.mvcs.iface.model.node.PowerConservation;
-import mil.navy.lcs.mvcs.iface.model.node.RadioLink;
-import mil.navy.lcs.mvcs.iface.model.node.VehicleNode;
-import mil.navy.lcs.mvcs.iface.power.PowerDevice;
-import mil.navy.lcs.mvcs.iface.power.PowerOutput;
-import mil.navy.lcs.mvcs.iface.rf.RFOutput;
-import mil.navy.lcs.mvcs.iface.rf.RFOutputType;
-import mil.navy.lcs.mvcs.iface.status.Status;
-import mil.navy.lcs.mvcs.vca.link.VcaLinkManager;
-import mil.navy.lcs.mvcs.vca.main.VehicleState;
-
-/**
- * This class provides functions to execute the SNMP request for vehicle table.
- * <p>
- * $LastChangedBy$ <br>
- * $LastChangedDate$ <br>
- * $LastChangedRevision$
- *
- * @version 1.0
- */
-public class VehicleTableWorker
-{
-   private static final Logger logger = LoggerFactory.getLogger(VehicleTableWorker.class);
-
-   private static volatile VehicleTableWorker instance;
-   private String vehicleId = "";
-
-   private static final String pdc_true_mapping = "ON";
-   private static final String pdc_false_mapping = "OFF";
-
-
-   private VehicleTableWorker()
-   {
-      logger.info("Initializing new instanceof: {} ", this.getClass().getName());
-      initialize();
-   }
-
-
-   public String getVehicleId()
-   {
-      return vehicleId;
-   }
-
-
-   /**
-    * Returns the single instance of the VCA request manager.
-    * 
-    * @return The single instance of the VCA request manager.
-    */
-   public static VehicleTableWorker getInstance()
-   {
-      {
-         if (instance == null)
-         {
-            synchronized (VehicleTableWorker.class)
-            {
-               if (instance == null)
-                  instance = new VehicleTableWorker();
-            }
-         }
-         return instance;
-      }
-   }
-
-
-   /**
-    * Initializes the class.
-    * 
-    * @return true if successful, false otherwise.
-    */
-   private boolean initialize()
-   {
-      try
-      {
-         vehicleId = ConfigManager.getInstance().getVehicle().getId();
-         return true;
-      }
-      catch (Exception ex)
-      {
-         return false;
-      }
-   }
-
-
-   /**
-    * To get the vehicle COMMS status.
-    * 
-    * @return "COMMS" or "NO-COMMS".
-    */
-   public String getVehicleCommsStatus()
-   {
-      VehicleNode node = VehicleState.model.node;
-
-      if (node.isComms())
-         return ConstantValues.VEHICLE_HAS_COMMS;
-      else
-         return ConstantValues.VEHICLE_HAS_NO_COMMS;
-   }
-
-
-   /**
-    * To get the requested active link of the vehicle. For RMS vehicle, it expects "LOS", "OTH",
-    * "LAN", or "".
-    * 
-    * @return - the linkId of requested active link.
-    */
-   public String getVehicleRequestedActiveLink()
-   {
-      VehicleNode node = VehicleState.model.node;
-      LinkModel link = node.getVehicleLinkRequested();
-      return link.commsType.displayName;
-   }
-
-
-   /**
-    * To request new active link for the vehicle that is initialized from VMS.
-    * 
-    * @param linkChangeValue - the link name. It may be "LOS", "OTH", "LAN" for RMS vehicle.
-    */
-   public void setVehicleRequestLinkChange(String linkChangeValue)
-   {
-      SnmpParameterParser spp = new SnmpParameterParser("setVehicleRequestLinkChange", linkChangeValue);
-      if (spp.hasError())
-      {
-         logger.error(spp.getStatusMessage());
-         return;
-      }
-
-      String radioName = spp.getValue();
-      // Handle the request with LOS, OTH, LAN instead actual radio name.
-      if (radioName != null)
-      {
-         radioName = radioName.trim();
-         if (radioName.equalsIgnoreCase("LOS"))
-         {
-            radioName = VehicleTableUtil.findLosButNotOthRadioId(vehicleId);
-         }
-         else if (radioName.equalsIgnoreCase("OTH"))
-         {
-            radioName = VehicleTableUtil.findOthRadioId(vehicleId);
-         }
-         else if (radioName.equalsIgnoreCase("LAN"))
-         {
-            radioName = VehicleTableUtil.findLanBypassLinkId(vehicleId);
-         }
-      }
-
-      // re-route the request to SCA so the SCA can decide to proceed or not.
-      VehicleState.handler.getMessageQueue().add(new LinkSwitchMessage(radioName));
-   }
-
-
-   /**
-    * This method returns the current NTP status
-    * 
-    * @return a string with SYNCED if the NTP is synced, NOT_SYNCED otherwise
-    */
-   public String getNtpStatus()
-   {
-      if (VehicleState.model.node.isNtpServerSynced())
-         return ConstantValues.SYNCED;
-      else
-         return ConstantValues.NOT_SYNCED;
-
-   }
-
-
-   /**
-    * To get the vehicle's allowed power state.
-    * 
-    * @return The allowedPowerState.
-    */
-   public String getVehicleRadioPowerStateAllowed()
-   {
-      logger.trace("Get VehicleRadioPowerStateAllowed has received.");
-
-      return String.valueOf(VehicleState.model.node.getPowerConservationMode().index);
-
-   }// end of method
-
-
-   /**
-    * To get the vehicle's allowed power state.
-    * 
-    * @param powerStateAllowed - The allowedPowerState to set.
-    */
-   public void setVehicleRadioPowerStateAllowed(String powerStateAllowed)
-   {
-      logger.trace("Set VehicleRadioPowerStateAllowed has received. powerStateAllowed:" + powerStateAllowed);
-      try
-      {
-         int powerState = Integer.parseInt(powerStateAllowed.trim());
-         if (PowerConservation.valueOf(powerState) != null)
-            VehicleState.handler.requestVehiclePowerConservation(powerState);
-         else
-            logger.error("VehicleRadioPowerStateAllowed has received an invalid power state of " + powerStateAllowed);
-      }
-      catch (Exception e)
-      {
-         LoggingManager.getPrimaryLogger().error("Error: ", e);
-      }
-   }// end of method
-
-
-   /**
-    * This method gets the current EMCON status
-    * 
-    * @return
-    */
-   public String getEmconState()
-   {
-      return VehicleState.model.node.isEmcon() ? ConstantValues.SNMP_TRUE : ConstantValues.SNMP_FALSE;
-
-   }
-
-
-   public void setEmconState(String emconState)
-   {
-      // Call this from MvcsTable
-   }
-
-
-   /**
-    * Get the current RF Switches status
-    * 
-    * @return
-    */
-   public String getMatrixSwitchMode()
-   {
-      // Get the list of radios
-      List<RadioLink> radios = (List<RadioLink>) VehicleState.model.node.getRadioLinks();
-      if (radios.size() < 1)
-         return ConstantValues.NOT_SET;
-
-      String result = "";
-
-      for (RadioLink radio : radios)
-      {
-         StringBuilder builder = new StringBuilder();
-
-         // Check what output it is using
-         for (RFOutput output : radio.getRFDevice().getRfOutputs().values())
-         {
-            String status;
-            if (output.isOutputting())
-               status = ConstantValues.ACTIVE;
-            else
-               status = ConstantValues.INACTIVE;
-
-            builder.append(radio.getLinkId()).append(",").append(output.getOutputType()).append(",").append(status).append(';');
-         }
-
-         result += builder.toString();
-      }
-
-      return result.toUpperCase();
-   }
-
-
-   public String getPdcStatus()
-   {
-      StringBuilder builder = new StringBuilder();
-
-      for (PowerDevice device : VehicleState.model.node.getPowerDevices().values())
-      {
-         for (PowerOutput output : device.getOutputs().values())
-         {
-            // PCR 1530 - Modified value to properly show power values.
-            builder.append(output.outputId).append(",").append(output.isOutputting() ? pdc_true_mapping : pdc_false_mapping).append(';');
-         }
-      }
-
-      String result = builder.toString().toUpperCase();
-
-      return result.substring(0, result.length() - 1);
-   }
-
-
-   /**
-    * To get the active link of the vehicle. It expects "LOS", "OTH", "LAN", "SAT", "BLOS" or
-    * "NONE".
-    * 
-    * @return - the linkId of active link.
-    */
-   public String getActiveLink()
-   {
-      VehicleNode node = VehicleState.model.node;
-      LinkModel link = node.getLink();
-
-      return link.commsType.displayName;
-   }
-
-
-   /**
-    * This method get the current link change status
-    * 
-    * @return the current link change status
-    */
-   public String getLinkChangeStatus()
-   {
-      return VehicleState.model.node.getLinkChangeStatus().toString().toUpperCase();
-   }
-
-
-   /**
-    * To get the power request of media converter that connects LANBYPASS
-    * 
-    * 
-    * @return "ENABLED" or "DISABLED"
-    */
-   public String getPowerOfMediaConverterForLanByPass()
-   {
-      if (VehicleState.model.node.isPowerRequestOfMediaConverter())
-         return ConstantValues.LINK_ENABLED;
-      else
-         return ConstantValues.LINK_DISABLED;
-   }
-
-
-   /**
-    * To set the power request of media converter that connects LANBYPASS
-    * 
-    * @param powerRequest - "ENABLE" or "DISABLE"
-    */
-   public void setPowerOfMediaConverterForLanByPass(String powerRequest)
-   {
-      VehicleState.handler.setMediaConverterPowerState(powerRequest);
-   }
-
-
-   /**
-    * To get antenna in use for the current active link. e.g "LOS,MAIN;LOS,MBAY". If active link is
-    * LAN or NONE, return "NOT_SET".
-    * 
-    * @return the antenna in use for active link.
-    */
-   public String getRadioAntennaInUse()
-   {
-      // Get active link
-      LinkModel link = VehicleState.model.node.getLink();
-      if (link instanceof RadioLink)
-      {
-         StringBuilder builder = new StringBuilder();
-
-         for (RFOutput output : ((RadioLink) link).getRFDevice().getRfOutputs().values())
-         {
-            // outputting
-            if (output.isOutputting())
-               builder.append(link.commsType.name()).append(",").append(output.getOutputType()).append(';');
-
-         }
-
-         return builder.toString().toUpperCase();
-      }
-
-      // not radio link
-      return ConstantValues.NOT_SET;
-
-   }// end of method
-
-
-   /**
-    * Get the current link management mode
-    * 
-    * @return a string for AUTOMATIC or MANUAL depending on the current state
-    */
-   public String getVehicleLinkManagement()
-   {
-      return VehicleState.model.node.isAutoManagement() ? ConstantValues.LINK_MANAGEMENT_MODE_AUTOMATIC : ConstantValues.LINK_MANAGEMENT_MODE_MANUAL;
-   }
-
-
-   /**
-    * 
-    * Method Description This method shutdown the vehicle
-    * 
-    * @param newValue warm or cold shutdown
-    */
-   public void setVehicleShutdown(String newValue)
-   {
-      boolean warm = newValue.equalsIgnoreCase("WARM");
-      boolean cold = newValue.equalsIgnoreCase("COLD");
-      if (warm)
-      {
-         VehicleState.handler.requestShutdown(ExitAction.WARM_SHUTDOWN);
-      }
-      else if (cold)
-      {
-         VehicleState.handler.requestShutdown(ExitAction.COLD_SHUTDOWN);
-      }
-      else
-      {
-         logger.error("Invalid Shutdown value");
-      }
-   }
-
-
-   /**
-    * To set the vehicle link management mode.
-    * 
-    * @param managementMode - the management mode to set. AUTOMATIC or MANUAL.
-    */
-   public void setVehicleRequestLinkManagement(String managementMode)
-   {
-      if (ConstantValues.LINK_MANAGEMENT_MODE_AUTOMATIC.equalsIgnoreCase(managementMode))
-         VehicleState.handler.requestAutoManagement(true);
-      else if (ConstantValues.LINK_MANAGEMENT_MODE_MANUAL.equalsIgnoreCase(managementMode))
-         VehicleState.handler.requestAutoManagement(false);
-      else
-         LoggingManager.getPrimaryLogger().error("Invalid link management mode {} to set.", managementMode);
-   }
-
-
-   /**
-    * To start the radio.
-    * 
-    * @param radio - the radio ID or radio's COMMTYPE (LOS, OTH, SAT, or BLOS)
-    */
-   public void setVehicleRequestStartRadio(String radio)
-   {
-      if (radio == null)
-         return;
-
-      radio = radio.trim();
-
-      // map the COMMTYPE to actual radio ID.
-      LinkModel link = VehicleState.model.node.getLink(radio);
-
-      // Can also be requested by the RMS display name, because LM...
-      if (link == null)
-      {
-         CommsType type = CommsType.fromDisplayName(radio);
-         link = VehicleState.model.node.getFirstLinkByCommsType(type);
-      }
-
-      if (link != null)
-         VehicleState.handler.requestInitializeLink(link.getLinkId());
-   }
-
-
-   /**
-    * To stop the radio
-    * 
-    * @param radio - the radio ID or radio's COMMTYPE (LOS, OTH, SAT, or BLOS)
-    */
-   public void setVehicleRequestStopRadio(String radio)
-   {
-      if (radio == null)
-         return;
-
-      radio = radio.trim();
-
-      // map the COMMTYPE to actual radio ID.
-      LinkModel link = VehicleState.model.node.getLink(radio);
-
-      // Can also be requested by the RMS display name, because LM...
-      if (link == null)
-      {
-         CommsType type = CommsType.fromDisplayName(radio);
-         link = VehicleState.model.node.getFirstLinkByCommsType(type);
-      }
-
-      if (link != null)
-         VehicleState.handler.requestDisconnectLink(link.getLinkId());
-   }
-
-
-   /**
-    * Method Description
-    * 
-    * THIS HAS BEEN DEPRICATED
-    * 
-    * @return
-    */
-   public String getVehicleRfTestPortStatus()
-   {
-      return ConstantValues.NOT_SET;
-
-   }
-
-
-   /**
-    * Method Description
-    * 
-    * @param newValue
-    */
-   public void setAbortLinkChange(String newValue)
-   {
-      VehicleState.handler.requestAbortLinkSwitching();
-
-   }
-
-
-   /**
-    * To get the current inhibit switch state
-    * 
-    * @return the current inhibit switch state.
-    */
-   public String getInhibitStatus()
-   {
-      if (VehicleState.model.node.isInhibited())
-         return ConstantValues.INHIBITED;
-      else
-         return ConstantValues.NOT_INHIBITED;
-   }
-
-
-   /**
-    * To set the vehicle's point-to-point radio is going to disconnect.
-    * 
-    * @param linkId - the link ID.
-    */
-   public void setVehiclePointToPointDisconnect(String linkId)
-   {
-      VehicleState.handler.requestDisconnectLink(linkId);
-   }
-
-
-   /**
-    * To get intentional Loss of COMMs status of the vehicle.
-    * 
-    * @return - "INTENTIONAL_LOC" or "".
-    */
-   public String getVehicleIntentionalLocStatus()
-   {
-      return VehicleState.model.node.isIntentionalLoc() ? "INTENTIONAL_LOC" : "";
-   }
-
-
-   /**
-    * To send request to update all mananger's status of vehicle.
-    * 
-    */
-   public void updateManagersStatusOfVehicle()
-   {
-      VehicleState.model.node.getSoftwareStatus();
-   }
-
-
-   /**
-    * To get the status of an OTH capable radio of the vehicle. This function is very ambiguous
-    * since there can be more than one OTH capable radios in the given vehicle. However, RMS folks
-    * currently has one OTH and one LOS radios. They want to know the status of radios. Defaults to
-    * ConstantValues.STATUS_UNKNOWN.
-    * 
-    * @return ConstantValues.STATUS_GOOD if link is connected. ConstantValues.STATUS_FAIL if not
-    *         connected.
-    */
-   public String getVehicleOthRadioStatus()
-   {
-      RadioLink link = (RadioLink) VehicleState.model.node.getFirstLinkByCommsType(CommsType.OTH);
-
-      if (link == null)
-         return ConstantValues.NOT_SET;
-      else
-         return link.isConnected() ? ConstantValues.STATUS_GOOD : ConstantValues.STATUS_FAILED;
-   }
-
-
-   /**
-    * To get the status of an LOS capable radio of the vehicle. This function is very ambiguous
-    * since there can be more than one LOS capable radios in the given vehicle. However, RMS folks
-    * currently has one OTH and one LOS radios. They want to know the status of radios. Defaults to
-    * ConstantValues.STATUS_UNKNOWN.
-    * 
-    * @return ConstantValues.STATUS_GOOD if link is connected. ConstantValues.STATUS_FAIL if not
-    *         connected.
-    */
-   public String getVehicleLosRadioStatus()
-   {
-      RadioLink link = (RadioLink) VehicleState.model.node.getFirstLinkByCommsType(CommsType.LOS);
-
-      if (link == null)
-         return ConstantValues.NOT_SET;
-      else
-         return link.isConnected() ? ConstantValues.STATUS_GOOD : ConstantValues.STATUS_FAILED;
-   }
-
-
-   /**
-    * To get the vehicle hardware status.
-    * 
-    * @return - The overall HW configured status. Options are "GOOD", "FAILED", or "UNKNOWN"
-    */
-   public String getVehicleHardwareStatus()
-   {
-      return VehicleState.model.node.getHardwareStatus().name();
-   }// end of method
-
-
-   /**
-    * To get the predicted LOS range of the vehicle.
-    * 
-    * @return The range of LOS radio.
-    */
-   public String getVehiclePredictedLOSRange()
-   {
-      String predictedLosRange = "0";
-
-      try
-      {
-         String losRadio = VehicleTableUtil.findLosButNotOthRadioId(vehicleId);
-
-         if (losRadio == null)
-            return predictedLosRange;
-
-         Radio losRadioConfig = (Radio) ConfigManager.getInstance().getVehicle().getLinkFromList(losRadio);
-
-         // convert the range to kiloyards
-         predictedLosRange = String.valueOf((losRadioConfig.getLosRange() * ConstantValues.NAUTICAL_MILE_IN_YDS) / 1000);
-      }
-      catch (Exception e)
-      {
-         logger.error("Error:", e);
-      }
-
-      return predictedLosRange;
-
-   }// end of method
-
-
-   /**
-    * To set the vehicle's sleep state. Expected values are "SleepAtRest", "SleepEnergized", or
-    * "Normal".
-    * 
-    * @param vehicleSleepState - The sleep state to set.
-    */
-   public void setVehicleSleepState(String vehicleSleepState)
-   {
-      logger.trace("Set vehicleSleepState has received. SleepState:" + vehicleSleepState);
-      VehicleState.handler.requestSleep(vehicleSleepState);
-
-   }// end of method
-
-
-   /**
-    * To get the vehicle's sleep state. Expected values are "SleepAtRest", "SleepEnergized", or
-    * "Normal".
-    * 
-    * @return The sleep state.
-    */
-   public String getVehicleSleepState()
-   {
-      return VehicleState.model.node.getSleepState().toString().toUpperCase();
-
-   }// end of method
-
-
-   /**
-    * To get the link switch acknowledgment.
-    * 
-    * 
-    * @return - the acknowledgment; "Yes" or "No"
-    */
-   public String getVehicleLinkSwitchAck()
-   {
-      return VehicleState.model.node.getLinkSwitchAck().toString().toUpperCase();
-
-   }
-
-
-   /**
-    * To set the link switch acknowledgment.
-    * 
-    * 
-    * @param acknowledgment - "Yes" or "No"
-    */
-   public void setVehicleLinkSwitchAck(String acknowledgment)
-   {
-      if (acknowledgment.equalsIgnoreCase(LinkSwitchAck.YES.toString()))
-         VehicleState.handler.setLinkSwitchAck(LinkSwitchAck.YES.toString());
-      else
-         VehicleState.handler.setLinkSwitchAck(LinkSwitchAck.NO.toString());
-
-   }// end of method
-
-
-   /**
-    * To set the on board.
-    * 
-    * @param onBoard - onBoard to set.
-    */
-   public void setVehicleOnBoard(String onBoard)
-   {
-      VehicleState.handler.requestVehicleDeployStatus(onBoard);
-   }// end of method
-
-
-   /**
-    * To set the link on board.
-    * 
-    * @return The onBoard
-    */
-   public String getVehicleOnBoard()
-   {
-      if (VehicleState.model.node.isDeployed())
-         return ConstantValues.VehicleInWater.InWater.toString().toUpperCase();
-      else
-         return ConstantValues.VehicleInWater.NotInWater.toString().toUpperCase();
-
-   }// end of method
-
-
-   /**
-    * To set the vehicle's power state of LOS radio power amplifier.
-    * 
-    * @param powerState - powerState to set. "ON" or "OFF"
-    */
-   public void setVehicleLosPAPowerState(String powerState)
-   {
-      VehicleState.handler.setLosAmpPowerStatus(powerState);
-
-   }// end of method
-
-
-   /**
-    * To get the vehicle's power state of LOS radio power amplifier.
-    * 
-    * @return The powerState.
-    */
-   public String getVehicleLosPAPowerState()
-   {
-      if (VehicleState.model.node.isLosAmpPowerOn())
-         return ConstantValues.POWERED_ON;
-      else
-         return ConstantValues.POWERED_OFF;
-
-   }// end of method
-
-
-   /**
-    * Method Description
-    * 
-    * @param vehicleId
-    * @return
-    */
-   public String getVehicleNetworkStatus(String vehicleId)
-   {
-      if (VehicleState.model.node.isComms())
-         return ConstantValues.HARDWARE_STATUS_GO;
-      else
-         return ConstantValues.HARDWARE_STATUS_NO_GO;
-   }
-
-
-   /**
-    * Method Description
-    * 
-    * @param vehicleId
-    * @return
-    */
-   public String getVehicleIpAddress(String vehicleId)
-   {
-      return ConfigManager.getInstance().getVehicle().getIpAddress();
-   }
-
-
-   /**
-    * Method Description
-    * 
-    * @param vehicleName
-    * @return
-    */
-   public String getVehicleRfLosSwitchOneStatus(String vehicleName)
-   {
-      return ConstantValues.NOT_SET;
-   }
-
-
-   /**
-    * Method Description
-    * 
-    * @param vehicleName
-    * @return
-    */
-   public String getVehicleRfLosSwitchThreeStatus(String vehicleName)
-   {
-      return ConstantValues.NOT_SET;
-   }
-
-
-   /**
-    * Method Description
-    * 
-    * @param vehicleName
-    * @return
-    */
-   public String getVehicleRfOthSwitchThreeStatus(String vehicleName)
-   {
-      return ConstantValues.NOT_SET;
-   }
-
-
-   /**
-    * TODO: Change call to Model Class - RF Switches
-    * 
-    * @param vehicleName
-    * @return
-    */
-   public String getVehicleRfOthSwitchTwoStatus(String vehicleName)
-   {
-      return ConstantValues.NOT_SET;
-   }
-
-
-   /**
-    * To get the LOS Power Amp's power request.
-    * 
-    * @return - The power request. On or Off
-    */
-   public String getLosPaPowerRequest()
-   {
-      if (VehicleState.model.node.isLosAmpPowerRequested())
-         return ConstantValues.POWERED_ON;
-      else
-         return ConstantValues.POWERED_OFF;
-   }
-
-
-   /**
-    * Gets the predictedOthRange.
-    * 
-    * @return predictedOthRange
-    */
-   public String getPredictedOthRange()
-   {
-      String range = "0";
-
-      try
-      {
-         Vehicle vehicle = ConfigManager.getInstance().getVehicle();
-
-         Integer maxRange = 0;
-         for (Radio radio : vehicle.getListOfRadios())
-            if (radio.getRadioCharacteristics().isOthCapable())
-               maxRange = Math.max(maxRange, radio.getLosRange());
-
-         // convert the range to kiloyards
-         range = String.valueOf((maxRange * ConstantValues.NAUTICAL_MILE_IN_YDS) / 1000);
-      }
-      catch (Exception e)
-      {
-         LoggingManager.getSystemErrorLogger().error("Exception while getting OTH range: ", e);
-      }
-
-      return range;
-   }
-
-
-   /**
-    * To get vehicle altitude depth.
-    * 
-    * @return the altitude depth.
-    */
-   public String getVehicleAltitudeDepth()
-   {
-      return String.valueOf(VehicleState.model.node.getDepth());
-   }
-
-
-   /**
-    * To set vehicle altitude depth.
-    */
-   public void setVehicleAltitudeDepth(String depth)
-   {
-      VehicleState.handler.setAltitudeDepth(Double.parseDouble(depth));
-
-   }
-
-
-   /**
-    * To get vehicle GPS latitude.
-    * 
-    * @return the GPS latitude.
-    */
-   public String getVehicleGPSLatitude()
-   {
-      return String.valueOf(VehicleState.model.node.getLatitude());
-   }
-
-
-   /**
-    * To set vehicle GPS latitude.
-    * 
-    * @param latitude the GPS latitude.
-    */
-   public void setVehicleGPSLatitude(String latitude)
-   {
-      VehicleState.handler.setGpsLatitude(Double.parseDouble(latitude));
-
-   }
-
-
-   /**
-    * To get vehicle GPS longitude.
-    * 
-    * @return the GPS longitude.
-    */
-   public String getVehicleGPSLongitude()
-   {
-      return String.valueOf(VehicleState.model.node.getLongitude());
-   }
-
-
-   /**
-    * To set vehicle GPS longitude.
-    * 
-    * TODO: Move code to handler
-    * 
-    * @param longitude the GPS longitude.
-    */
-   public void setVehicleGPSLongitude(String longitude)
-   {
-      VehicleState.handler.setGpsLongitude(Double.parseDouble(longitude));
-
-   }
-
-
-   /**
-    * Get the current system status
-    * 
-    * @return GO if system is up, NO_GO otherwise
-    */
-   public String getMvcsSystemStatus()
-   {
-      Status s = VehicleState.model.node.getHardwareStatus();
-
-      if (s == Status.GOOD)
-         return ConstantValues.HARDWARE_STATUS_GO;
-      else
-         return ConstantValues.HARDWARE_STATUS_NO_GO;
-   }
-
-
-   /**
-    * Sets RF switch input and output mode. Values are "RADIO,RF_OUTPUT". Values for RADIO are "LOS"
-    * and "OTH". Values for RFOUTPUT are RFOutputType such as "LNR", "MAIN", "MBAY", "TEST",
-    * "TEST_MAIN", and "TEST_LNR".
-    * 
-    * @param radioRfoutput - the value to change RF switch.
-    */
-   public void setVehicleRequestMatrixSwitchMode(String radioRfoutput)
-   {
-      try
-      {
-         logger.debug("External request to set RF switch [Mode:{}]");
-         
-         // IR-2017-0176 Block external commands during LOCR
-         if(VcaLinkManager.getInstance().getVcaNodeBean().isInAutoLocRecovery())
-         {
-            // Not allow antenna change. Let the LOCR do the work.
-            logger.info("External command is blocked because the LOC-recovery is in progress.");
-            return;
-         }
-
-         String[] params = radioRfoutput.split(",");
-         if (params.length != 2)
-         {
-            LoggingManager.getPrimaryLogger().error("Invalid value {} to change RF switch.", radioRfoutput);
-            return;
-         }
-
-         CommsType commsType = CommsType.valueOf(params[0].trim());
-         RFOutputType rfOutputType = RFOutputType.valueOf(params[1].trim());
-
-         LinkModel link = VehicleState.model.node.getFirstLinkByCommsType(commsType);
-         VehicleState.handler.requestRf(link.getLinkId(), rfOutputType, true);
-      }
-      catch (Exception e)
-      {
-         LoggingManager.getPrimaryLogger().error("Error change matrix switch mode: ", e);
-      }
-   }
-
-
-   /**
-    * To get the vehicle zeroized status.
-    * 
-    * @return "TRUE" if keyed otherwise returns "FALSE".
-    */
-   public String getVehicleZeroized()
-   {
-      return VehicleState.model.node.isKeyed() ? "FALSE" : "TRUE";
-   }
-
-
-   /**
-    * To set the vehicle zeroized status.
-    * 
-    * @param zeroize - "TRUE" to set zeroized otherwise ignored.
-    */
-   public void setVehicleZeroized(String zeroize)
-   {
-      if (Boolean.parseBoolean(zeroize))
-         VehicleState.handler.requestZeroize();
-   }
-
-}// end of class
+
+
+package mil.navy.lcs.mvcs.vca.snmp.agent.workers;
+
+
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import mil.navy.lcs.mvcs.common.config.ConfigManager;
+import mil.navy.lcs.mvcs.common.config.model.Radio;
+import mil.navy.lcs.mvcs.common.config.model.Vehicle;
+import mil.navy.lcs.mvcs.common.log.LoggingManager;
+import mil.navy.lcs.mvcs.common.messages.AcknowledgmentCategory;
+import mil.navy.lcs.mvcs.common.messages.LinkSwitchMessage;
+import mil.navy.lcs.mvcs.common.misc.ConstantValues;
+import mil.navy.lcs.mvcs.common.utils.VehicleTableUtil;
+import mil.navy.lcs.mvcs.iface.app.ExitAction;
+import mil.navy.lcs.mvcs.iface.model.node.CommsType;
+import mil.navy.lcs.mvcs.iface.model.node.ConstantValues.LinkSwitchAck;
+import mil.navy.lcs.mvcs.iface.model.node.LinkModel;
+import mil.navy.lcs.mvcs.iface.model.node.PowerConservation;
+import mil.navy.lcs.mvcs.iface.model.node.RadioLink;
+import mil.navy.lcs.mvcs.iface.model.node.VehicleNode;
+import mil.navy.lcs.mvcs.iface.power.PowerDevice;
+import mil.navy.lcs.mvcs.iface.power.PowerOutput;
+import mil.navy.lcs.mvcs.iface.rf.RFOutput;
+import mil.navy.lcs.mvcs.iface.rf.RFOutputType;
+import mil.navy.lcs.mvcs.iface.status.Status;
+import mil.navy.lcs.mvcs.vca.link.VcaLinkManager;
+import mil.navy.lcs.mvcs.vca.main.VehicleState;
+
+/**
+ * This class provides functions to execute the SNMP request for vehicle table.
+ * <p>
+ * $LastChangedBy$ <br>
+ * $LastChangedDate$ <br>
+ * $LastChangedRevision$
+ *
+ * @version 1.0
+ */
+public class VehicleTableWorker
+{
+   private static final Logger logger = LoggerFactory.getLogger(VehicleTableWorker.class);
+
+   private static volatile VehicleTableWorker instance;
+   private String vehicleId = "";
+
+   private static final String pdc_true_mapping = "ON";
+   private static final String pdc_false_mapping = "OFF";
+
+
+   private VehicleTableWorker()
+   {
+      logger.info("Initializing new instanceof: {} ", this.getClass().getName());
+      initialize();
+   }
+
+
+   public String getVehicleId()
+   {
+      return vehicleId;
+   }
+
+
+   /**
+    * Returns the single instance of the VCA request manager.
+    * 
+    * @return The single instance of the VCA request manager.
+    */
+   public static VehicleTableWorker getInstance()
+   {
+      {
+         if (instance == null)
+         {
+            synchronized (VehicleTableWorker.class)
+            {
+               if (instance == null)
+                  instance = new VehicleTableWorker();
+            }
+         }
+         return instance;
+      }
+   }
+
+
+   /**
+    * Initializes the class.
+    * 
+    * @return true if successful, false otherwise.
+    */
+   private boolean initialize()
+   {
+      try
+      {
+         vehicleId = ConfigManager.getInstance().getVehicle().getId();
+         return true;
+      }
+      catch (Exception ex)
+      {
+         return false;
+      }
+   }
+
+
+   /**
+    * To get the vehicle COMMS status.
+    * 
+    * @return "COMMS" or "NO-COMMS".
+    */
+   public String getVehicleCommsStatus()
+   {
+      VehicleNode node = VehicleState.model.node;
+
+      if (node.isComms())
+         return ConstantValues.VEHICLE_HAS_COMMS;
+      else
+         return ConstantValues.VEHICLE_HAS_NO_COMMS;
+   }
+
+
+   /**
+    * To get the requested active link of the vehicle. For RMS vehicle, it expects "LOS", "OTH",
+    * "LAN", or "".
+    * 
+    * @return - the linkId of requested active link.
+    */
+   public String getVehicleRequestedActiveLink()
+   {
+      VehicleNode node = VehicleState.model.node;
+      LinkModel link = node.getVehicleLinkRequested();
+      return link.commsType.displayName;
+   }
+
+
+   /**
+    * To request new active link for the vehicle that is initialized from VMS. This request shall be
+    * re-directed to the host system (SCA) for a confirmation. The request message should only be
+    * attempted to transmit to the host system once without any further retransmit to avoid delayed
+    * unexpected behavior.
+    * 
+    * @param linkChangeValue - the link name. It may be "LOS", "OTH", "LAN" for RMS vehicle.
+    */
+   public void setVehicleRequestLinkChange(String linkChangeValue)
+   {
+      logger.debug("External request to change link to [Link:{}]", linkChangeValue);
+      SnmpParameterParser spp = new SnmpParameterParser("setVehicleRequestLinkChange", linkChangeValue);
+      if (spp.hasError())
+      {
+         logger.error(spp.getStatusMessage());
+         return;
+      }
+
+      String radioName = spp.getValue();
+      // Handle the request with LOS, OTH, LAN instead actual radio name.
+      if (radioName != null)
+      {
+         radioName = radioName.trim();
+         if (radioName.equalsIgnoreCase("LOS"))
+         {
+            radioName = VehicleTableUtil.findLosButNotOthRadioId(vehicleId);
+         }
+         else if (radioName.equalsIgnoreCase("OTH"))
+         {
+            radioName = VehicleTableUtil.findOthRadioId(vehicleId);
+         }
+         else if (radioName.equalsIgnoreCase("LAN"))
+         {
+            radioName = VehicleTableUtil.findLanBypassLinkId(vehicleId);
+         }
+      }
+
+      // re-route the request to SCA so the SCA can decide to proceed or not.
+      // Should not be re-transmitted after initial attempt to avoid delayed action
+      VehicleState.handler.getMessageQueue().add(new LinkSwitchMessage(radioName, AcknowledgmentCategory.NO_ACK_NO_RETRY));
+   }
+
+
+   /**
+    * This method returns the current NTP status
+    * 
+    * @return a string with SYNCED if the NTP is synced, NOT_SYNCED otherwise
+    */
+   public String getNtpStatus()
+   {
+      if (VehicleState.model.node.isNtpServerSynced())
+         return ConstantValues.SYNCED;
+      else
+         return ConstantValues.NOT_SYNCED;
+
+   }
+
+
+   /**
+    * To get the vehicle's allowed power state.
+    * 
+    * @return The allowedPowerState.
+    */
+   public String getVehicleRadioPowerStateAllowed()
+   {
+      logger.trace("Get VehicleRadioPowerStateAllowed has received.");
+
+      return String.valueOf(VehicleState.model.node.getPowerConservationMode().index);
+
+   }// end of method
+
+
+   /**
+    * To get the vehicle's allowed power state.
+    * 
+    * @param powerStateAllowed - The allowedPowerState to set.
+    */
+   public void setVehicleRadioPowerStateAllowed(String powerStateAllowed)
+   {
+      logger.trace("Set VehicleRadioPowerStateAllowed has received. powerStateAllowed:" + powerStateAllowed);
+      try
+      {
+         int powerState = Integer.parseInt(powerStateAllowed.trim());
+         if (PowerConservation.valueOf(powerState) != null)
+            VehicleState.handler.requestVehiclePowerConservation(powerState);
+         else
+            logger.error("VehicleRadioPowerStateAllowed has received an invalid power state of " + powerStateAllowed);
+      }
+      catch (Exception e)
+      {
+         LoggingManager.getPrimaryLogger().error("Error: ", e);
+      }
+   }// end of method
+
+
+   /**
+    * This method gets the current EMCON status
+    * 
+    * @return
+    */
+   public String getEmconState()
+   {
+      return VehicleState.model.node.isEmcon() ? ConstantValues.SNMP_TRUE : ConstantValues.SNMP_FALSE;
+
+   }
+
+
+   public void setEmconState(String emconState)
+   {
+      // Call this from MvcsTable
+   }
+
+
+   /**
+    * Get the current RF Switches status
+    * 
+    * @return
+    */
+   public String getMatrixSwitchMode()
+   {
+      // Get the list of radios
+      List<RadioLink> radios = (List<RadioLink>) VehicleState.model.node.getRadioLinks();
+      if (radios.size() < 1)
+         return ConstantValues.NOT_SET;
+
+      String result = "";
+
+      for (RadioLink radio : radios)
+      {
+         StringBuilder builder = new StringBuilder();
+
+         // Check what output it is using
+         for (RFOutput output : radio.getRFDevice().getRfOutputs().values())
+         {
+            String status;
+            if (output.isOutputting())
+               status = ConstantValues.ACTIVE;
+            else
+               status = ConstantValues.INACTIVE;
+
+            builder.append(radio.getLinkId()).append(",").append(output.getOutputType()).append(",").append(status).append(';');
+         }
+
+         result += builder.toString();
+      }
+
+      return result.toUpperCase();
+   }
+
+
+   public String getPdcStatus()
+   {
+      StringBuilder builder = new StringBuilder();
+
+      for (PowerDevice device : VehicleState.model.node.getPowerDevices().values())
+      {
+         for (PowerOutput output : device.getOutputs().values())
+         {
+            // PCR 1530 - Modified value to properly show power values.
+            builder.append(output.outputId).append(",").append(output.isOutputting() ? pdc_true_mapping : pdc_false_mapping).append(';');
+         }
+      }
+
+      String result = builder.toString().toUpperCase();
+
+      return result.substring(0, result.length() - 1);
+   }
+
+
+   /**
+    * To get the active link of the vehicle. It expects "LOS", "OTH", "LAN", "SAT", "BLOS" or
+    * "NONE".
+    * 
+    * @return - the linkId of active link.
+    */
+   public String getActiveLink()
+   {
+      VehicleNode node = VehicleState.model.node;
+      LinkModel link = node.getLink();
+
+      return link.commsType.displayName;
+   }
+
+
+   /**
+    * This method get the current link change status
+    * 
+    * @return the current link change status
+    */
+   public String getLinkChangeStatus()
+   {
+      return VehicleState.model.node.getLinkChangeStatus().toString().toUpperCase();
+   }
+
+
+   /**
+    * To get the power request of media converter that connects LANBYPASS
+    * 
+    * 
+    * @return "ENABLED" or "DISABLED"
+    */
+   public String getPowerOfMediaConverterForLanByPass()
+   {
+      if (VehicleState.model.node.isPowerRequestOfMediaConverter())
+         return ConstantValues.LINK_ENABLED;
+      else
+         return ConstantValues.LINK_DISABLED;
+   }
+
+
+   /**
+    * To set the power request of media converter that connects LANBYPASS
+    * 
+    * @param powerRequest - "ENABLE" or "DISABLE"
+    */
+   public void setPowerOfMediaConverterForLanByPass(String powerRequest)
+   {
+      VehicleState.handler.setMediaConverterPowerState(powerRequest);
+   }
+
+
+   /**
+    * To get antenna in use for the current active link. e.g "LOS,MAIN;LOS,MBAY". If active link is
+    * LAN or NONE, return "NOT_SET".
+    * 
+    * @return the antenna in use for active link.
+    */
+   public String getRadioAntennaInUse()
+   {
+      // Get active link
+      LinkModel link = VehicleState.model.node.getLink();
+      if (link instanceof RadioLink)
+      {
+         StringBuilder builder = new StringBuilder();
+
+         for (RFOutput output : ((RadioLink) link).getRFDevice().getRfOutputs().values())
+         {
+            // outputting
+            if (output.isOutputting())
+               builder.append(link.commsType.name()).append(",").append(output.getOutputType()).append(';');
+
+         }
+
+         return builder.toString().toUpperCase();
+      }
+
+      // not radio link
+      return ConstantValues.NOT_SET;
+
+   }// end of method
+
+
+   /**
+    * Get the current link management mode
+    * 
+    * @return a string for AUTOMATIC or MANUAL depending on the current state
+    */
+   public String getVehicleLinkManagement()
+   {
+      return VehicleState.model.node.isAutoManagement() ? ConstantValues.LINK_MANAGEMENT_MODE_AUTOMATIC : ConstantValues.LINK_MANAGEMENT_MODE_MANUAL;
+   }
+
+
+   /**
+    * 
+    * Method Description This method shutdown the vehicle
+    * 
+    * @param newValue warm or cold shutdown
+    */
+   public void setVehicleShutdown(String newValue)
+   {
+      boolean warm = newValue.equalsIgnoreCase("WARM");
+      boolean cold = newValue.equalsIgnoreCase("COLD");
+      if (warm)
+      {
+         VehicleState.handler.requestShutdown(ExitAction.WARM_SHUTDOWN);
+      }
+      else if (cold)
+      {
+         VehicleState.handler.requestShutdown(ExitAction.COLD_SHUTDOWN);
+      }
+      else
+      {
+         logger.error("Invalid Shutdown value");
+      }
+   }
+
+
+   /**
+    * To set the vehicle link management mode.
+    * 
+    * @param managementMode - the management mode to set. AUTOMATIC or MANUAL.
+    */
+   public void setVehicleRequestLinkManagement(String managementMode)
+   {
+      if (ConstantValues.LINK_MANAGEMENT_MODE_AUTOMATIC.equalsIgnoreCase(managementMode))
+         VehicleState.handler.requestAutoManagement(true);
+      else if (ConstantValues.LINK_MANAGEMENT_MODE_MANUAL.equalsIgnoreCase(managementMode))
+         VehicleState.handler.requestAutoManagement(false);
+      else
+         LoggingManager.getPrimaryLogger().error("Invalid link management mode {} to set.", managementMode);
+   }
+
+
+   /**
+    * To start the radio.
+    * 
+    * @param radio - the radio ID or radio's COMMTYPE (LOS, OTH, SAT, or BLOS)
+    */
+   public void setVehicleRequestStartRadio(String radio)
+   {
+      logger.debug("External request to start radio [Radio:{}]" + radio);
+      if (radio == null)
+         return;
+
+      radio = radio.trim();
+
+      // map the COMMTYPE to actual radio ID.
+      LinkModel link = VehicleState.model.node.getLink(radio);
+
+      // Can also be requested by the RMS display name, because LM...
+      if (link == null)
+      {
+         CommsType type = CommsType.fromDisplayName(radio);
+         link = VehicleState.model.node.getFirstLinkByCommsType(type);
+      }
+
+      if (link != null)
+         VehicleState.handler.requestInitializeLink(link.getLinkId());
+   }
+
+
+   /**
+    * To stop the radio
+    * 
+    * @param radio - the radio ID or radio's COMMTYPE (LOS, OTH, SAT, or BLOS)
+    */
+   public void setVehicleRequestStopRadio(String radio)
+   {
+      logger.debug("External request to stop radio [Radio:{}]" + radio);
+      if (radio == null)
+         return;
+
+      radio = radio.trim();
+
+      // map the COMMTYPE to actual radio ID.
+      LinkModel link = VehicleState.model.node.getLink(radio);
+
+      // Can also be requested by the RMS display name, because LM...
+      if (link == null)
+      {
+         CommsType type = CommsType.fromDisplayName(radio);
+         link = VehicleState.model.node.getFirstLinkByCommsType(type);
+      }
+
+      if (link != null)
+         VehicleState.handler.requestDisconnectLink(link.getLinkId());
+   }
+
+
+   /**
+    * Method Description
+    * 
+    * THIS HAS BEEN DEPRICATED
+    * 
+    * @return
+    */
+   public String getVehicleRfTestPortStatus()
+   {
+      return ConstantValues.NOT_SET;
+
+   }
+
+
+   /**
+    * Method Description
+    * 
+    * @param newValue
+    */
+   public void setAbortLinkChange(String newValue)
+   {
+      VehicleState.handler.requestAbortLinkSwitching();
+
+   }
+
+
+   /**
+    * To get the current inhibit switch state
+    * 
+    * @return the current inhibit switch state.
+    */
+   public String getInhibitStatus()
+   {
+      if (VehicleState.model.node.isInhibited())
+         return ConstantValues.INHIBITED;
+      else
+         return ConstantValues.NOT_INHIBITED;
+   }
+
+
+   /**
+    * To set the vehicle's point-to-point radio is going to disconnect.
+    * 
+    * @param linkId - the link ID.
+    */
+   public void setVehiclePointToPointDisconnect(String linkId)
+   {
+      VehicleState.handler.requestDisconnectLink(linkId);
+   }
+
+
+   /**
+    * To get intentional Loss of COMMs status of the vehicle.
+    * 
+    * @return - "INTENTIONAL_LOC" or "".
+    */
+   public String getVehicleIntentionalLocStatus()
+   {
+      return VehicleState.model.node.isIntentionalLoc() ? "INTENTIONAL_LOC" : "";
+   }
+
+
+   /**
+    * To send request to update all mananger's status of vehicle.
+    * 
+    */
+   public void updateManagersStatusOfVehicle()
+   {
+      VehicleState.model.node.getSoftwareStatus();
+   }
+
+
+   /**
+    * To get the status of an OTH capable radio of the vehicle. This function is very ambiguous
+    * since there can be more than one OTH capable radios in the given vehicle. However, RMS folks
+    * currently has one OTH and one LOS radios. They want to know the status of radios. Defaults to
+    * ConstantValues.STATUS_UNKNOWN.
+    * 
+    * @return ConstantValues.STATUS_GOOD if link is connected. ConstantValues.STATUS_FAIL if not
+    *         connected.
+    */
+   public String getVehicleOthRadioStatus()
+   {
+      RadioLink link = (RadioLink) VehicleState.model.node.getFirstLinkByCommsType(CommsType.OTH);
+
+      if (link == null)
+         return ConstantValues.NOT_SET;
+      else
+         return link.isConnected() ? ConstantValues.STATUS_GOOD : ConstantValues.STATUS_FAILED;
+   }
+
+
+   /**
+    * To get the status of an LOS capable radio of the vehicle. This function is very ambiguous
+    * since there can be more than one LOS capable radios in the given vehicle. However, RMS folks
+    * currently has one OTH and one LOS radios. They want to know the status of radios. Defaults to
+    * ConstantValues.STATUS_UNKNOWN.
+    * 
+    * @return ConstantValues.STATUS_GOOD if link is connected. ConstantValues.STATUS_FAIL if not
+    *         connected.
+    */
+   public String getVehicleLosRadioStatus()
+   {
+      RadioLink link = (RadioLink) VehicleState.model.node.getFirstLinkByCommsType(CommsType.LOS);
+
+      if (link == null)
+         return ConstantValues.NOT_SET;
+      else
+         return link.isConnected() ? ConstantValues.STATUS_GOOD : ConstantValues.STATUS_FAILED;
+   }
+
+
+   /**
+    * To get the vehicle hardware status.
+    * 
+    * @return - The overall HW configured status. Options are "GOOD", "FAILED", or "UNKNOWN"
+    */
+   public String getVehicleHardwareStatus()
+   {
+      return VehicleState.model.node.getHardwareStatus().name();
+   }// end of method
+
+
+   /**
+    * To get the predicted LOS range of the vehicle.
+    * 
+    * @return The range of LOS radio.
+    */
+   public String getVehiclePredictedLOSRange()
+   {
+      String predictedLosRange = "0";
+
+      try
+      {
+         String losRadio = VehicleTableUtil.findLosButNotOthRadioId(vehicleId);
+
+         if (losRadio == null)
+            return predictedLosRange;
+
+         Radio losRadioConfig = (Radio) ConfigManager.getInstance().getVehicle().getLinkFromList(losRadio);
+
+         // convert the range to kiloyards
+         predictedLosRange = String.valueOf((losRadioConfig.getLosRange() * ConstantValues.NAUTICAL_MILE_IN_YDS) / 1000);
+      }
+      catch (Exception e)
+      {
+         logger.error("Error:", e);
+      }
+
+      return predictedLosRange;
+
+   }// end of method
+
+
+   /**
+    * To set the vehicle's sleep state. Expected values are "SleepAtRest", "SleepEnergized", or
+    * "Normal".
+    * 
+    * @param vehicleSleepState - The sleep state to set.
+    */
+   public void setVehicleSleepState(String vehicleSleepState)
+   {
+      logger.trace("Set vehicleSleepState has received. SleepState:" + vehicleSleepState);
+      VehicleState.handler.requestSleep(vehicleSleepState);
+
+   }// end of method
+
+
+   /**
+    * To get the vehicle's sleep state. Expected values are "SleepAtRest", "SleepEnergized", or
+    * "Normal".
+    * 
+    * @return The sleep state.
+    */
+   public String getVehicleSleepState()
+   {
+      return VehicleState.model.node.getSleepState().toString().toUpperCase();
+
+   }// end of method
+
+
+   /**
+    * To get the link switch acknowledgment.
+    * 
+    * 
+    * @return - the acknowledgment; "Yes" or "No"
+    */
+   public String getVehicleLinkSwitchAck()
+   {
+      return VehicleState.model.node.getLinkSwitchAck().toString().toUpperCase();
+
+   }
+
+
+   /**
+    * To set the link switch acknowledgment.
+    * 
+    * 
+    * @param acknowledgment - "Yes" or "No"
+    */
+   public void setVehicleLinkSwitchAck(String acknowledgment)
+   {
+      if (acknowledgment.equalsIgnoreCase(LinkSwitchAck.YES.toString()))
+         VehicleState.handler.setLinkSwitchAck(LinkSwitchAck.YES.toString());
+      else
+         VehicleState.handler.setLinkSwitchAck(LinkSwitchAck.NO.toString());
+
+   }// end of method
+
+
+   /**
+    * To set the on board.
+    * 
+    * @param onBoard - onBoard to set.
+    */
+   public void setVehicleOnBoard(String onBoard)
+   {
+      VehicleState.handler.requestVehicleDeployStatus(onBoard);
+   }// end of method
+
+
+   /**
+    * To set the link on board.
+    * 
+    * @return The onBoard
+    */
+   public String getVehicleOnBoard()
+   {
+      if (VehicleState.model.node.isDeployed())
+         return ConstantValues.VehicleInWater.InWater.toString().toUpperCase();
+      else
+         return ConstantValues.VehicleInWater.NotInWater.toString().toUpperCase();
+
+   }// end of method
+
+
+   /**
+    * To set the vehicle's power state of LOS radio power amplifier.
+    * 
+    * @param powerState - powerState to set. "ON" or "OFF"
+    */
+   public void setVehicleLosPAPowerState(String powerState)
+   {
+      VehicleState.handler.setLosAmpPowerStatus(powerState);
+
+   }// end of method
+
+
+   /**
+    * To get the vehicle's power state of LOS radio power amplifier.
+    * 
+    * @return The powerState.
+    */
+   public String getVehicleLosPAPowerState()
+   {
+      if (VehicleState.model.node.isLosAmpPowerOn())
+         return ConstantValues.POWERED_ON;
+      else
+         return ConstantValues.POWERED_OFF;
+
+   }// end of method
+
+
+   /**
+    * Method Description
+    * 
+    * @param vehicleId
+    * @return
+    */
+   public String getVehicleNetworkStatus(String vehicleId)
+   {
+      if (VehicleState.model.node.isComms())
+         return ConstantValues.HARDWARE_STATUS_GO;
+      else
+         return ConstantValues.HARDWARE_STATUS_NO_GO;
+   }
+
+
+   /**
+    * Method Description
+    * 
+    * @param vehicleId
+    * @return
+    */
+   public String getVehicleIpAddress(String vehicleId)
+   {
+      return ConfigManager.getInstance().getVehicle().getIpAddress();
+   }
+
+
+   /**
+    * Method Description
+    * 
+    * @param vehicleName
+    * @return
+    */
+   public String getVehicleRfLosSwitchOneStatus(String vehicleName)
+   {
+      return ConstantValues.NOT_SET;
+   }
+
+
+   /**
+    * Method Description
+    * 
+    * @param vehicleName
+    * @return
+    */
+   public String getVehicleRfLosSwitchThreeStatus(String vehicleName)
+   {
+      return ConstantValues.NOT_SET;
+   }
+
+
+   /**
+    * Method Description
+    * 
+    * @param vehicleName
+    * @return
+    */
+   public String getVehicleRfOthSwitchThreeStatus(String vehicleName)
+   {
+      return ConstantValues.NOT_SET;
+   }
+
+
+   /**
+    * TODO: Change call to Model Class - RF Switches
+    * 
+    * @param vehicleName
+    * @return
+    */
+   public String getVehicleRfOthSwitchTwoStatus(String vehicleName)
+   {
+      return ConstantValues.NOT_SET;
+   }
+
+
+   /**
+    * To get the LOS Power Amp's power request.
+    * 
+    * @return - The power request. On or Off
+    */
+   public String getLosPaPowerRequest()
+   {
+      if (VehicleState.model.node.isLosAmpPowerRequested())
+         return ConstantValues.POWERED_ON;
+      else
+         return ConstantValues.POWERED_OFF;
+   }
+
+
+   /**
+    * Gets the predictedOthRange.
+    * 
+    * @return predictedOthRange
+    */
+   public String getPredictedOthRange()
+   {
+      String range = "0";
+
+      try
+      {
+         Vehicle vehicle = ConfigManager.getInstance().getVehicle();
+
+         Integer maxRange = 0;
+         for (Radio radio : vehicle.getListOfRadios())
+            if (radio.getRadioCharacteristics().isOthCapable())
+               maxRange = Math.max(maxRange, radio.getLosRange());
+
+         // convert the range to kiloyards
+         range = String.valueOf((maxRange * ConstantValues.NAUTICAL_MILE_IN_YDS) / 1000);
+      }
+      catch (Exception e)
+      {
+         LoggingManager.getSystemErrorLogger().error("Exception while getting OTH range: ", e);
+      }
+
+      return range;
+   }
+
+
+   /**
+    * To get vehicle altitude depth.
+    * 
+    * @return the altitude depth.
+    */
+   public String getVehicleAltitudeDepth()
+   {
+      return String.valueOf(VehicleState.model.node.getDepth());
+   }
+
+
+   /**
+    * To set vehicle altitude depth.
+    */
+   public void setVehicleAltitudeDepth(String depth)
+   {
+      VehicleState.handler.setAltitudeDepth(Double.parseDouble(depth));
+
+   }
+
+
+   /**
+    * To get vehicle GPS latitude.
+    * 
+    * @return the GPS latitude.
+    */
+   public String getVehicleGPSLatitude()
+   {
+      return String.valueOf(VehicleState.model.node.getLatitude());
+   }
+
+
+   /**
+    * To set vehicle GPS latitude.
+    * 
+    * @param latitude the GPS latitude.
+    */
+   public void setVehicleGPSLatitude(String latitude)
+   {
+      VehicleState.handler.setGpsLatitude(Double.parseDouble(latitude));
+
+   }
+
+
+   /**
+    * To get vehicle GPS longitude.
+    * 
+    * @return the GPS longitude.
+    */
+   public String getVehicleGPSLongitude()
+   {
+      return String.valueOf(VehicleState.model.node.getLongitude());
+   }
+
+
+   /**
+    * To set vehicle GPS longitude.
+    * 
+    * TODO: Move code to handler
+    * 
+    * @param longitude the GPS longitude.
+    */
+   public void setVehicleGPSLongitude(String longitude)
+   {
+      VehicleState.handler.setGpsLongitude(Double.parseDouble(longitude));
+
+   }
+
+
+   /**
+    * Get the current system status
+    * 
+    * @return GO if system is up, NO_GO otherwise
+    */
+   public String getMvcsSystemStatus()
+   {
+      Status s = VehicleState.model.node.getHardwareStatus();
+
+      if (s == Status.GOOD)
+         return ConstantValues.HARDWARE_STATUS_GO;
+      else
+         return ConstantValues.HARDWARE_STATUS_NO_GO;
+   }
+
+
+   /**
+    * Sets RF switch input and output mode. Values are "RADIO,RF_OUTPUT". Values for RADIO are "LOS"
+    * and "OTH". Values for RFOUTPUT are RFOutputType such as "LNR", "MAIN", "MBAY", "TEST",
+    * "TEST_MAIN", and "TEST_LNR".
+    * 
+    * @param radioRfoutput - the value to change RF switch.
+    */
+   public void setVehicleRequestMatrixSwitchMode(String radioRfoutput)
+   {
+      try
+      {
+         logger.debug("External request to set RF switch [Mode:{}]", radioRfoutput);
+
+         // IR-2017-0176 Block external commands during LOCR
+         if (VcaLinkManager.getInstance().getVcaNodeBean().isInAutoLocRecovery())
+         {
+            // Not allow antenna change. Let the LOCR do the work.
+            logger.info("External command is blocked because the LOC-recovery is in progress.");
+            return;
+         }
+
+         String[] params = radioRfoutput.split(",");
+         if (params.length != 2)
+         {
+            LoggingManager.getPrimaryLogger().error("Invalid value {} to change RF switch.", radioRfoutput);
+            return;
+         }
+
+         CommsType commsType = CommsType.valueOf(params[0].trim());
+         RFOutputType rfOutputType = RFOutputType.valueOf(params[1].trim());
+
+         LinkModel link = VehicleState.model.node.getFirstLinkByCommsType(commsType);
+         VehicleState.handler.requestRf(link.getLinkId(), rfOutputType, true);
+      }
+      catch (Exception e)
+      {
+         LoggingManager.getPrimaryLogger().error("Error change matrix switch mode: ", e);
+      }
+   }
+
+
+   /**
+    * To get the vehicle zeroized status.
+    * 
+    * @return "TRUE" if keyed otherwise returns "FALSE".
+    */
+   public String getVehicleZeroized()
+   {
+      return VehicleState.model.node.isKeyed() ? "FALSE" : "TRUE";
+   }
+
+
+   /**
+    * To set the vehicle zeroized status.
+    * 
+    * @param zeroize - "TRUE" to set zeroized otherwise ignored.
+    */
+   public void setVehicleZeroized(String zeroize)
+   {
+      if (Boolean.parseBoolean(zeroize))
+         VehicleState.handler.requestZeroize();
+   }
+
+}// end of class
