### Eclipse Workspace Patch 1.0
#P mvcs-interface
Index: src/main/java/mil/navy/lcs/mvcs/iface/alerts/AlertEvents.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/iface/alerts/AlertEvents.java	(revision 9574)
+++ src/main/java/mil/navy/lcs/mvcs/iface/alerts/AlertEvents.java	(working copy)
@@ -121,7 +121,7 @@
       if (initialized)
          return;
 
-      for (final MvcsNode node : model.getNodes().values())
+      for (final MvcsNode node : model.getNodes())
       {
          node.addPropertyChangeListener(MvcsNode.EMCON, emconListener);
          node.addPropertyChangeListener(MvcsNode.KEYED, keyedListener);
Index: src/main/java/mil/navy/lcs/mvcs/iface/model/node/LinkModel.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/iface/model/node/LinkModel.java	(revision 9574)
+++ src/main/java/mil/navy/lcs/mvcs/iface/model/node/LinkModel.java	(working copy)
@@ -6,6 +6,7 @@
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyChangeSupport;
 import java.io.Serializable;
+import java.util.Comparator;
 
 import mil.navy.lcs.mvcs.iface.status.StatusItem;
 
@@ -85,7 +86,19 @@
 
    protected transient final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
 
+   /**
+    * Used for sorting links based on priority, from highest priority (lowest value) at the start to
+    * lowest priority (highest value) at the end.
+    */
+   public static final Comparator<LinkModel> linkPriorityComparator = new Comparator<LinkModel>()
+   {
+      public int compare(LinkModel o1, LinkModel o2)
+      {
+         return Integer.compare(o1.getPriority(), o2.getPriority());
+      }
+   };
 
+
    public LinkModel( final String linkId, final String nodeId, final int linkNumber, final MvcsLinkType mvcsLinkType, final CommsType commsType, Integer maxRange)
    {
       this.linkId = linkId;
Index: src/main/java/mil/navy/lcs/mvcs/iface/model/ShipModel.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/iface/model/ShipModel.java	(revision 9574)
+++ src/main/java/mil/navy/lcs/mvcs/iface/model/ShipModel.java	(working copy)
@@ -4,13 +4,11 @@
 
 
 import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
 
-import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
-import mil.navy.lcs.mvcs.iface.model.node.VehicleNode;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -21,6 +19,10 @@
 import com.google.common.cache.LoadingCache;
 import com.google.common.collect.Maps;
 
+import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
+import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
+import mil.navy.lcs.mvcs.iface.model.node.VehicleNode;
+
 /**
  * 
  * This class represents the ship model of MVCS application.
@@ -31,7 +33,7 @@
  *
  * @version 1.0
  */
-public class ShipModel extends NodeModel<ShipNode>implements Serializable
+public class ShipModel extends NodeModel<ShipNode> implements Serializable
 {
    private static final Logger logger = LoggerFactory.getLogger(ShipModel.class);
 
@@ -39,7 +41,7 @@
 
    public ShipNode ship;
 
-   private Map<String, MvcsNode> nodes = new TreeMap<String, MvcsNode>();
+   private List<MvcsNode> nodes = new ArrayList<MvcsNode>();
 
    private transient Map<String, VehicleNode> vehicles = new TreeMap<String, VehicleNode>();
 
@@ -80,12 +82,18 @@
       Preconditions.checkNotNull(node);
 
       if (node instanceof ShipNode)
+      {
          ship = (ShipNode) node;
+      }
       else if (node instanceof VehicleNode)
+      {
          vehicles.put(node.getNodeId(), (VehicleNode) node);
-
+      }
+      
       logger.info("adding node ID " + node.getNodeId() + " to the hashtable ");
-      nodes.put(node.getNodeId(), node);
+      nodes.add(node);
+      
+      sortNodesByTypeAndId(nodes);
    }
 
 
@@ -128,11 +136,14 @@
 
    public MvcsNode getNode(final String nodeId)
    {
-      return nodes.get(nodeId);
+      for (MvcsNode node : nodes)
+         if (node.getNodeId().equalsIgnoreCase(nodeId))
+            return node;
+
+      return null;
    }
 
-
-   public Map<String, MvcsNode> getNodes()
+   public List<MvcsNode> getNodes()
    {
       return nodes;
    }
@@ -164,4 +175,17 @@
    {
       return cacheVehiclesByClass.getUnchecked(cls);
    }
+
+
+   /**
+    * To sort nodes in the order of type and ID. Ship(ID:100), RMMV(ID:1), RMMV(ID:2), UISS/USV, UUV
+    * 
+    * @return nodes by the order of type and ID.
+    */
+   public static void sortNodesByTypeAndId(List<MvcsNode> nodes)
+   {
+      nodes.sort(MvcsNode.nodeIdComparator);
+      nodes.sort(MvcsNode.nodeTypeComparator);
+
+   }
 }
Index: src/main/java/mil/navy/lcs/mvcs/iface/model/node/MvcsNode.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/iface/model/node/MvcsNode.java	(revision 9574)
+++ src/main/java/mil/navy/lcs/mvcs/iface/model/node/MvcsNode.java	(working copy)
@@ -189,17 +189,46 @@
 
 
    /**
-    * Used for sorting links based on priority, from highest priority (lowest value) at the start to
-    * lowest priority (highest value) at the end.
+    * Used for sorting nodes based on ID
     */
-   protected static final Comparator<LinkModel> linkPriorityComparator = new Comparator<LinkModel>()
+   public static final Comparator<MvcsNode> nodeIdComparator = new Comparator<MvcsNode>()
    {
-      public int compare(LinkModel o1, LinkModel o2)
+      public int compare(MvcsNode o1, MvcsNode o2)
       {
-         return Integer.compare(o1.getPriority(), o2.getPriority());
+         return o1.getNodeId().toUpperCase().compareTo(o2.getNodeId().toUpperCase());
       }
    };
 
+
+   /**
+    * Used for sorting nodes based on type, from Ship, RMMV, UISS, UUV.
+    */
+   public static final Comparator<MvcsNode> nodeTypeComparator = new Comparator<MvcsNode>()
+   {
+      public int compare(MvcsNode o1, MvcsNode o2)
+      {
+         // order is ShipNode, RMMV, USV, UUV, and the rest.
+         if (o2 instanceof ShipNode)
+            return +1;
+         else if (o1 instanceof ShipNode)
+            return -1;
+         else if (o2 instanceof RmmvNode)
+            return +1;
+         else if (o1 instanceof RmmvNode)
+            return -1;
+         else if (o2 instanceof UissNode)
+            return +1;
+         else if (o1 instanceof UissNode)
+            return -1;
+         else if (o2 instanceof UuvNode)
+            return +1;
+         else if (o1 instanceof UuvNode)
+            return -1;
+         else
+            return 0;
+      }
+   };
+
    protected final Map<String, LinkModel> nodeLinks = Maps.newLinkedHashMap();
 
    protected transient final PropertyChangeSupport pcs = new PropertyChangeSupport(this);
@@ -411,7 +440,7 @@
    {
       return FluentIterable //
                .from(getLinks()) //
-               .toSortedList(linkPriorityComparator);
+               .toSortedList(LinkModel.linkPriorityComparator);
    }
 
 
Index: src/main/java/mil/navy/lcs/mvcs/iface/model/node/VehicleNode.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/iface/model/node/VehicleNode.java	(revision 9574)
+++ src/main/java/mil/navy/lcs/mvcs/iface/model/node/VehicleNode.java	(working copy)
@@ -487,7 +487,7 @@
       final List<LinkModel> connectedLinks = FluentIterable //
                .from(getLinks()) //
                .filter(linkConnectedPredicate) //
-               .toSortedList(linkPriorityComparator);
+               .toSortedList(LinkModel.linkPriorityComparator);
 
       setLink(connectedLinks.isEmpty() ? LinkModel.NO_LINK : connectedLinks.get(0));
    }
@@ -693,7 +693,7 @@
    {
       return FluentIterable //
                .from(getRadioLinks()) //
-               .toSortedList(linkPriorityComparator);
+               .toSortedList(LinkModel.linkPriorityComparator);
    }
 
 
#P mvcs-webgui
Index: src/mil/navy/lcs/mvcs/webgui/servlets/NodeServlet.java
===================================================================
--- src/mil/navy/lcs/mvcs/webgui/servlets/NodeServlet.java	(revision 9576)
+++ src/mil/navy/lcs/mvcs/webgui/servlets/NodeServlet.java	(working copy)
@@ -6,7 +6,7 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.rmi.ConnectException;
-import java.util.Vector;
+import java.util.List;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
@@ -15,7 +15,6 @@
 
 import mil.navy.lcs.mvcs.iface.app.NotStartedException;
 import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
-import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.webgui.app.AppState;
 
 /**
@@ -37,20 +36,11 @@
          response.setContentType("application/json");
          String nodeId = (String) request.getParameter("node");
 
-         //System.out.println("In NodeServlet doGet(): nodeId=" + nodeId);
+         // System.out.println("In NodeServlet doGet(): nodeId=" + nodeId);
          if (nodeId.equalsIgnoreCase("all"))
          {
             // List contains all nodes
-            Vector<MvcsNode> nodeCollection = new Vector<MvcsNode>();
-            for (String id : AppState.instance.getShipModel().getNodes().keySet())
-            {
-               MvcsNode mvcsNode = AppState.instance.getShipModel().getNode(id);
-               // put the ship node at the first
-               if (mvcsNode instanceof ShipNode)
-                  nodeCollection.add(0, mvcsNode);
-               else
-                  nodeCollection.add(mvcsNode);
-            }
+            List<MvcsNode> nodeCollection = AppState.instance.getShipModel().getNodes();
 
             PrintWriter writer = response.getWriter();
             gson.toJson(nodeCollection, writer);
Index: test.system/mil/navy/lcs/mvcs/webgui/app/BackendInterfaceTest.java
===================================================================
--- test.system/mil/navy/lcs/mvcs/webgui/app/BackendInterfaceTest.java	(revision 9576)
+++ test.system/mil/navy/lcs/mvcs/webgui/app/BackendInterfaceTest.java	(working copy)
@@ -13,6 +13,11 @@
 import java.rmi.server.UnicastRemoteObject;
 import java.util.Collection;
 
+import org.junit.Before;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import mil.navy.lcs.mvcs.iface.alerts.Alert;
 import mil.navy.lcs.mvcs.iface.app.ExitAction;
 import mil.navy.lcs.mvcs.iface.app.MvcsRemoteInterface;
@@ -19,19 +24,14 @@
 import mil.navy.lcs.mvcs.iface.app.UserLevel;
 import mil.navy.lcs.mvcs.iface.link.LinkAction;
 import mil.navy.lcs.mvcs.iface.model.ShipModel;
-import mil.navy.lcs.mvcs.iface.model.node.VehicleState;
 
-import org.junit.Before;
-import org.junit.Test;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 public class BackendInterfaceTest implements MvcsRemoteInterface
 {
-   
+
    private static final Logger logger = LoggerFactory.getLogger(BackendInterfaceTest.class);
    private static MvcsRemoteInterface stub;
 
+
    /**
     * Starts the remote engine.
     * 
@@ -55,6 +55,7 @@
       }
    }
 
+
    @Override
    public boolean checkAccess(String userName, String password) throws RemoteException
    {
@@ -216,16 +217,18 @@
    public void requestTestOverRfTestPort(String nodeId, String linkId, String rfOutputType, boolean on) throws RemoteException
    {
       // TODO Auto-generated method stub
-      
+
    }
 
+
    @Override
    public void requestAmpAntenna(String nodeId, String linkId, String outputId, String antennaId, boolean active) throws RemoteException
    {
       // TODO Auto-generated method stub
-      
+
    }
 
+
    @Override
    public void requestOthAntennaOverride(String linkId, boolean manual) throws RemoteException
    {
#P mvcs-sca
Index: src/main/test/mil/navy/lcs/mvcs/sca/model/ShipModelTest.java
===================================================================
--- src/main/test/mil/navy/lcs/mvcs/sca/model/ShipModelTest.java	(revision 9574)
+++ src/main/test/mil/navy/lcs/mvcs/sca/model/ShipModelTest.java	(working copy)
@@ -5,21 +5,30 @@
 
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;
+
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import junit.framework.Assert;
 import mil.navy.lcs.mvcs.iface.model.ShipModel;
+import mil.navy.lcs.mvcs.iface.model.node.MvcsNode;
 import mil.navy.lcs.mvcs.iface.model.node.RmmvNode;
+import mil.navy.lcs.mvcs.iface.model.node.ShipNode;
 import mil.navy.lcs.mvcs.iface.model.node.UissNode;
+import mil.navy.lcs.mvcs.iface.model.node.UuvNode;
 import mil.navy.lcs.mvcs.iface.model.node.VehicleNode;
 
-import org.junit.Before;
-import org.junit.Test;
-
 public class ShipModelTest
 {
    ShipModel shipModel;
-   VehicleNode vehicleFour;
-   VehicleNode vehicleOne;
-   VehicleNode vehicleThree;
-   VehicleNode vehicleTwo;
+   VehicleNode uiss_3;
+   VehicleNode rmmv_1;
+   VehicleNode rmmv_5;
+   VehicleNode rmmv_4;
+   VehicleNode uuv_2;
+   ShipNode ship100;
 
 
    @Before
@@ -26,20 +35,27 @@
    public void setUp() throws Exception
    {
       shipModel = new ShipModel();
-      vehicleOne = new RmmvNode();
-      vehicleTwo = new RmmvNode();
-      vehicleThree = new RmmvNode();
-      vehicleFour = new UissNode();
 
-      vehicleOne.setNodeId("vehicleOne");
-      vehicleTwo.setNodeId("vehicleTwo");
-      vehicleThree.setNodeId("vehicleThree");
-      vehicleFour.setNodeId("vehicleFour");
+      rmmv_1 = new RmmvNode();
+      rmmv_4 = new RmmvNode();
+      rmmv_5 = new RmmvNode();
+      uiss_3 = new UissNode();
+      uuv_2 = new UuvNode();
+      ship100 = new ShipNode();
 
-      shipModel.addNode(vehicleOne);
-      shipModel.addNode(vehicleTwo);
-      shipModel.addNode(vehicleThree);
-      shipModel.addNode(vehicleFour);
+      rmmv_1.setNodeId("1");
+      rmmv_4.setNodeId("4");
+      rmmv_5.setNodeId("5");
+      uiss_3.setNodeId("3");
+      uuv_2.setNodeId("2");
+      ship100.setNodeId("100");
+
+      shipModel.addNode(uiss_3);
+      shipModel.addNode(rmmv_4);
+      shipModel.addNode(rmmv_1);
+      shipModel.addNode(uuv_2);
+      shipModel.addNode(ship100);
+      shipModel.addNode(rmmv_5);
    }
 
 
@@ -46,16 +62,16 @@
    @Test
    public void testAdjustPriority_decreasing()
    {
-      vehicleOne.setPriority(1);
-      vehicleTwo.setPriority(2);
-      vehicleThree.setPriority(3);
-      vehicleFour.setPriority(4);
+      rmmv_1.setPriority(1);
+      rmmv_4.setPriority(2);
+      rmmv_5.setPriority(3);
+      uiss_3.setPriority(4);
 
-      shipModel.adjustPriority(vehicleFour, 2);
-      assertThat(vehicleOne.getPriority(), is(1));
-      assertThat(vehicleTwo.getPriority(), is(3));
-      assertThat(vehicleThree.getPriority(), is(4));
-      assertThat(vehicleFour.getPriority(), is(2));
+      shipModel.adjustPriority(uiss_3, 2);
+      assertThat(rmmv_1.getPriority(), is(1));
+      assertThat(rmmv_4.getPriority(), is(3));
+      assertThat(rmmv_5.getPriority(), is(4));
+      assertThat(uiss_3.getPriority(), is(2));
    }
 
 
@@ -62,16 +78,16 @@
    @Test
    public void testAdjustPriority_increasing()
    {
-      vehicleOne.setPriority(1);
-      vehicleTwo.setPriority(2);
-      vehicleThree.setPriority(3);
-      vehicleFour.setPriority(4);
+      rmmv_1.setPriority(1);
+      rmmv_4.setPriority(2);
+      rmmv_5.setPriority(3);
+      uiss_3.setPriority(4);
 
-      shipModel.adjustPriority(vehicleOne, 3);
-      assertThat(vehicleOne.getPriority(), is(3));
-      assertThat(vehicleTwo.getPriority(), is(1));
-      assertThat(vehicleThree.getPriority(), is(2));
-      assertThat(vehicleFour.getPriority(), is(4));
+      shipModel.adjustPriority(rmmv_1, 3);
+      assertThat(rmmv_1.getPriority(), is(3));
+      assertThat(rmmv_4.getPriority(), is(1));
+      assertThat(rmmv_5.getPriority(), is(2));
+      assertThat(uiss_3.getPriority(), is(4));
    }
 
 
@@ -81,4 +97,22 @@
       assertThat(shipModel.getVehiclesByClass(RmmvNode.class).size(), is(3));
       assertThat(shipModel.getVehiclesByClass(UissNode.class).size(), is(1));
    }
+
+
+   @Test
+   public void testNodesOrderByTypeAndID()
+   {
+      List<MvcsNode> nodes = shipModel.getNodes();
+
+      System.out.println("Order by type and id ... ");
+      for (MvcsNode node : nodes)
+         System.out.println(node.getNodeId() + " " + node.getClassName());
+
+      assertThat(shipModel.getNodes().size(), is(6));
+      Assert.assertTrue("The first node must be Ship", shipModel.getNodes().get(0) instanceof ShipNode);
+      Assert.assertTrue("The second node must be RMMV", shipModel.getNodes().get(1) instanceof RmmvNode);
+      Assert.assertTrue("The third node must be RMMV4", shipModel.getNodes().get(2) == rmmv_4);
+      Assert.assertTrue("The fifth node must be UISS", shipModel.getNodes().get(4) instanceof UissNode);
+      Assert.assertTrue("The sixth node must be UUV", shipModel.getNodes().get(5) instanceof UuvNode);
+   }
 }
Index: src/main/java/mil/navy/lcs/mvcs/sca/db/DatabaseState.java
===================================================================
--- src/main/java/mil/navy/lcs/mvcs/sca/db/DatabaseState.java	(revision 9574)
+++ src/main/java/mil/navy/lcs/mvcs/sca/db/DatabaseState.java	(working copy)
@@ -302,7 +302,7 @@
       // Initialize DB updater
 
       // all nodes
-      for (MvcsNode node : model.getNodes().values())
+      for (MvcsNode node : model.getNodes())
       {
          // EMCON for all nodes
          node.addPropertyChangeListener(MvcsNode.EMCON, emconUpdater);
