Index: WebContent/nodeInfo.html
===================================================================
--- WebContent/nodeInfo.html	(revision 9525)
+++ WebContent/nodeInfo.html	(working copy)
@@ -4,8 +4,7 @@
 <meta charset="UTF-8">
 <title>Node Info</title>
 
-<link id="colorCSS" rel=StyleSheet href="css/colors.css" type="text/css"
-	media="all">
+<link id="colorCSS" rel=StyleSheet href="css/colors.css" type="text/css" media="all">
 <link rel=StyleSheet href="css/theme.css" type="text/css" media="all">
 <link rel=StyleSheet href="css/utils.css" type="text/css" media="all">
 <link rel=StyleSheet href="css/boxModel.css" type="text/css" media="all">
@@ -19,11 +18,9 @@
 <script type="text/javascript" src="js/lib/jquery.getParams.js"></script>
 <script type="text/javascript" src="js/lib/jquery.history.js"></script>
 <!-- Add fancyBox -->
-<link rel="stylesheet"
-	href="js/lib/fancybox/sources/jquery.fancybox.css" type="text/css"
-	media="screen" />
-<script type="text/javascript"
-	src="js/lib/fancybox/sources/jquery.fancybox.pack.js"></script>
+<link rel="stylesheet" href="js/lib/fancybox/sources/jquery.fancybox.css" type="text/css"
+  media="screen" />
+<script type="text/javascript" src="js/lib/fancybox/sources/jquery.fancybox.pack.js"></script>
 
 
 <script type="text/javascript" src="js/userinfo.js"></script>
@@ -38,608 +35,607 @@
 </head>
 <!-- Sets display: none to hide while Knockout is loading, then data-bind="visible: true" causes everything to show. This is to remove the flicker of divs and status when not fully loaded -->
 <body>
-	<div id="inactiveOverlay"></div>
-	<div id="messageBox"></div>
+  <div id="inactiveOverlay"></div>
+  <div id="messageBox"></div>
 
-	<!-- hidden inline form -->
-	<div class="hiddenForm" id="radioSettings">
-		<div id="radioSettings_config_label"></div>
-		<h2></h2>
-		<form action="" name="radioConfigure">
-			<label for="freq_value">Frequency :</label>
-			<label id="freq_value">XXX</label>
-			<br>
-			<!--  This text box will be need for inputting the vehicle frequency. -->
-			<!-- <input id="radioSettings_frequency" class="txt" disabled="disabled"/>  -->
-			<button type="submit" class="configureBtn"
-				onclick="submitRadioSettings(event);">Push</button>
-			<input type="button" value="Close" onclick="$.fancybox.close()" />
-		</form>
-	</div>
+  <!-- hidden inline form -->
+  <div class="hiddenForm" id="radioSettings">
+    <div id="radioSettings_config_label"></div>
+    <h2></h2>
+    <form action="" name="radioConfigure">
+      <label for="freq_value">Frequency :</label> <label id="freq_value">XXX</label> <br>
+      <!--  This text box will be need for inputting the vehicle frequency. -->
+      <!-- <input id="radioSettings_frequency" class="txt" disabled="disabled"/>  -->
+      <button type="submit" class="configureBtn" onclick="submitRadioSettings(event);">Push</button>
+      <input type="button" value="Close" onclick="$.fancybox.close()" />
+    </form>
+  </div>
 
-<!-- MVCS 1426 RF Test Port -->
-	<!-- hidden inline form -->
-	<div class="hiddenForm" id="testSettings">
-		<div id="testSettings_config_label"></div>
-		<h2>RF Test Port</h2>
-		<form action="" name="testConfigure">
-			<!-- <input id="test_selection"	class="txt" /> -->
-			<table id="rfTestTable">
-			<tbody>
-			<tr>
-			<td>
-			<label for="#test_selection_lnr">Test L&R</label>
-			<input class="test_selection" id="test_selection_lnr"  type="radio" name="radioTest" value="TEST_LNR" checked/>
-			
-			</td>
-			</tr>
-			<tr>
-			<td>
-			<label for="#test_selection_main">Test Main</label>
-			<input class="test_Selection" id="test_selection_main"  type="radio" name="radioTest" value="TEST_MAIN"/>
-			</td>
-			</tr>
-			</tbody>
-			</table>			
-			<button type="submit" class="configureBtn"
-				onclick="submitRfTest(event, true, document.getElementsByName('radioTest'));">Start</button>
-			<button type="submit" class="configureBtn"
-				onclick="submitRfTest(event, false,  document.getElementsByName('radioTest'));">Stop</button>
-			<input type="button" value="Close" onclick="$.fancybox.close()" />
-		</form>
-	</div>
-	
-	<!-- hidden inline form -->
-	<div class="hiddenForm" id="oth_testSettings">
-		<div id="oth_testSettings_config_label"></div>
-		<h2>RF Test Port</h2>
-		<form action="" name="testConfigure">		
-			<button type="submit" class="configureBtn"
-				onclick="submitRfOthTest(event, true);">Start</button>
-			<button type="submit" class="configureBtn"
-				onclick="submitRfOthTest(event, false);">Stop</button>
-			<input type="button" value="Close" onclick="$.fancybox.close()" />
-		</form>
-	</div>
+  <!-- MVCS 1426 RF Test Port -->
+  <!-- hidden inline form -->
+  <div class="hiddenForm" id="testSettings">
+    <div id="testSettings_config_label"></div>
+    <h2>RF Test Port</h2>
+    <form action="" name="testConfigure">
+      <!-- <input id="test_selection"	class="txt" /> -->
+      <table id="rfTestTable">
+        <tbody>
+          <tr>
+            <td><label for="#test_selection_lnr">Test L&R</label> <input class="test_selection"
+              id="test_selection_lnr" type="radio" name="radioTest" value="TEST_LNR" checked /></td>
+          </tr>
+          <tr>
+            <td><label for="#test_selection_main">Test Main</label> <input
+              class="test_Selection" id="test_selection_main" type="radio" name="radioTest"
+              value="TEST_MAIN" /></td>
+          </tr>
+        </tbody>
+      </table>
+      <button type="submit" class="configureBtn"
+        onclick="submitRfTest(event, true, document.getElementsByName('radioTest'));">Start</button>
+      <button type="submit" class="configureBtn"
+        onclick="submitRfTest(event, false,  document.getElementsByName('radioTest'));">Stop</button>
+      <input type="button" value="Close" onclick="$.fancybox.close()" />
+    </form>
+  </div>
 
-	<div class="bodyHeader hbox">
-		<div>MVCS @app_version@</div>
-		<div class="boxFlex1"></div>
-		<div class="sessionManagement hbox">
-			<div>Logged in as:</div>
-			<div id="usernameBox"></div>
-			<div id="userlevelBox"></div>
-			<div id="userinfoSpacer">|</div>
-			<a class="logoutLink" href="settings.html">Settings</a>
-			<div id="userinfoSpacer">|</div>
-			<a class="logoutLink" href="Logout">Logout</a>
-		</div>
-	</div>
+  <!-- hidden inline form -->
+  <div class="hiddenForm" id="oth_testSettings">
+    <div id="oth_testSettings_config_label"></div>
+    <h2>RF Test Port</h2>
+    <form action="" name="testConfigure">
+      <button type="submit" class="configureBtn" onclick="submitRfOthTest(event, true);">Start</button>
+      <button type="submit" class="configureBtn" onclick="submitRfOthTest(event, false);">Stop</button>
+      <input type="button" value="Close" onclick="$.fancybox.close()" />
+    </form>
+  </div>
 
-	<div class="bodyContent vbox">
+  <div class="bodyHeader hbox">
+    <div>MVCS @app_version@</div>
+    <div class="boxFlex1"></div>
+    <div class="sessionManagement hbox">
+      <div>Logged in as:</div>
+      <div id="usernameBox"></div>
+      <div id="userlevelBox"></div>
+      <div id="userinfoSpacer">|</div>
+      <a class="logoutLink" href="settings.html">Settings</a>
+      <div id="userinfoSpacer">|</div>
+      <a class="logoutLink" href="Logout">Logout</a>
+    </div>
+  </div>
 
-		<div id="nodeNavContainer" class="horizontalNavContainer"
-			style="display: none !important" data-bind="visible: true">
-			<!-- ko foreach: nodes -->
-			<button class="navButton nodeSelectionButton"
-				data-bind="text: nodeName, attr: { 'nodeName': nodeName, 'nodeId' : nodeId }"
-				onclick="selectNode(this);"></button>
-			<!-- /ko -->
-		</div>
+  <div class="bodyContent vbox">
 
-		<div id="nodeInformation" class="vbox"
-			style="display: none !important" data-bind="visible: true">
-			<!-- MVCS1453 - Fix AutoManagement GUI Issue -->
-			<div class="node content vbox"
-				data-bind="attr: { id: nodeId, 'name': nodeName, 'data-state': state, 'data-vehicleType' : className }, css: { comms: comms, emcon: emcon, emconCapable: emconCapable, autoManagement: autoManagementValue }">
-				<div class="nodeRunner hbox">
-					<div class="node" data-bind="attr: { 'name': nodeName, id: nodeId }">
-						<img data-bind="attr: { src: imgSrc } " />
-					</div>
-					<div class="vbox">
-						<div class="nodeId" data-bind="text: nodeName"></div>
-						<div class="dataItem hbox">
-							<div class="dataLabel">Loaded Mission:</div>
-							<div class="dataValue" data-bind="text: missionName"></div>
-						</div>
-					</div>
-				</div>
+    <div id="nodeNavContainer" class="horizontalNavContainer" style="display: none !important"
+      data-bind="visible: true">
+      <!-- ko foreach: nodes -->
+      <button class="navButton nodeSelectionButton"
+        data-bind="text: nodeName, attr: { 'nodeName': nodeName, 'nodeId' : nodeId }"
+        onclick="selectNode(this);"></button>
+      <!-- /ko -->
+    </div>
 
-				<div id="nodeInfoMain" class="hbox">
-					<!-- MVCSSRS0806 -->
-					<div id="leftMenu" class="vbox">
-						<button class="navAll navButton viewButton"
-							onclick="window.location = 'dash.html';">Dash</button>
-						<button class="navButton viewButton" data-navId='summary'
-							onclick="setSelectedView(this);" id="defaultNavView">Summary</button>
-						<button class="navButton viewButton" data-navId='control'
-							onclick="setSelectedView(this);">Control</button>
-						<button class="navButton viewButton" data-navId='status'
-							onclick="setSelectedView(this);">Status</button>
-						<button class="navButton viewButton" data-navId='alerts'
-							onclick="setSelectedView(this);">Alerts</button>
-					</div>
-					<div id="nodeInactiveView">
-					<!-- MVCS01433 Show Vehicle Inactive -->
-						<button id="forceNodeActive"
-							data-bind="click: requestNodeActive.bind($data)">Vehicle is Inactive, Force as Active</button>
-					</div>
-					<div id="nodeDataView" class="vbox">
-						<!--  ko if: isShip -->
-						<div id="summary">
-							<div class="nodeInfoBox">
-								<table class="nodeControlItemTable statusTable">
-									<thead>
-										<tr>
-											<th>Item</th>
-											<th>Status</th>
-											<th></th>
-										</tr>
-									</thead>
-									<tbody>
-										<tr class="emcon status"
-											data-bind="css: { 'good': emconInactive }">
-											<td class="dataLabel">EMCON</td>
-											<td><button class="request true"
-													data-bind="click: requestEmcon.bind($data, 'false')">OFF</button>
-											</td>
-											<td>
-												<button class="request false"
-													data-bind="click: requestEmcon.bind($data, 'true')">ACTIVE
-												</button>
-											</td>
-										</tr>
-					
-										<tr class="rfAllow status"
-											data-bind="css: { 'good': transmitAllowed, disappear:!emconInactive()}">
-											<td class="dataLabel">RF</td>
-											<td><button class="request true"
-													data-bind="click: requestTransmitAllow.bind($data, 'true')">Allowed</button>
-											</td>
-											<td>
-												<button class="request false"
-													data-bind="click: requestTransmitAllow.bind($data, 'false')">Not
-													Allowed</button>
-											</td>
-										</tr>
-									</tbody>
-								</table>
-							</div>
-							<div class="nodeInfoBox">
-								<table class="nodeControlItemTable statusTable">
-									<thead>
-										<tr>
-											<th>Item</th>
-											<th>Status</th>
-										</tr>
-									</thead>
-									<tbody>
-										<tr>
-											<td class="dataLabel">SW Status</td>
-											<td>UNAVAILABLE</td>
-										</tr>
-										<tr>
-											<td class="dataLabel">HW Status</td>
-											<td>UNAVAILABLE</td>
-										</tr>
-										<tr>
-											<td>&nbsp;</td>
-											<td>&nbsp;</td>
-										</tr>
-										<tr>
-											<td>&nbsp;</td>
-											<td>&nbsp;</td>
-										</tr>
-									</tbody>
-								</table>
-							</div>
-						</div>
-						<!--  /ko -->
-						<!--  ko ifnot: isShip -->
-						<div id="summary">
-							<div class="nodeInfoControlContainer">
-								<div class="nodeInfoBox">
-									<table class="nodeControlItemTable statusTable">
-										<thead>
-											<tr>
-												<th>Item</th>
-												<th>Status</th>
-												<th></th>
-											</tr>
-										</thead>
-										<tbody>
-											<tr>
-												<td class="dataLabel">Priority</td>
-												<td data-bind="text: priority"></td>
-												<td><select
-													data-bind="options: priorities, value: requestedPriority, optionsCaption: priority">
-												</select></td>
-											</tr>
-											<tr class="emconStatus">
-												<td class="dataLabel">EMCON</td>
-												<td class="emconText"
-													data-bind="css: { 'emcon': emcon }, text: emconText"></td>
-												<td class="emconTimer" data-bind="text: emconTimeRemaining"></td>
-											</tr>
-											<tr class="zeroized status"
-												data-bind="css: { 'good': keyed }">
-												<td class="dataLabel">Crypto Status</td>
-												<td><div class="booleanTrueIsGoodFalseIsBad"
-														data-bind="css: { 'booleanTrue' : keyed }, text: keyedText"></div>
-												</td>
-												<td>
-													<button data-bind="click: requestZeroize.bind($data)">Zeroize</button>
-												</td>
-											</tr>
-											<tr>
-												<td class="dataLabel">Status</td>
-												<td data-bind="text: state"></td>
-												<td></td>
-											</tr>
-											<!--  MVCS1453 - Fix AutoManagement GUI Issue -->
-											<tr class="managementMode status"
-												data-bind="css: { 'good': autoManagementValue }">
-												<td class="dataLabel">Management</td>
-												<td>
-													<button class="request true"
-														data-bind="click: requestManagement.bind($data, 'true')">Automatic
-													</button>
-												</td>
-												<td>
-													<button class="request false"
-														data-bind="click: requestManagement.bind($data, 'false')">Manual
-													</button>
-												</td>
-											</tr>
-											<tr class="commsAllowedMode status commsStuff"
-												data-bind="css: { 'good': commsAllowed }">
-												<td class="dataLabel">Communication</td>
-												<td><button class="request true"
-														data-bind="click: requestCommsAllowed.bind($data, 'true')">Allowed</button>
-												</td>
-												<td>
-													<button class="request false"
-														data-bind="click: requestCommsAllowed.bind($data, 'false')">Not
-														Allowed</button>
-												</td>
-											</tr>
-										</tbody>
-									</table>
-								</div>
-								<div class="nodeInfoBox">
-									<table class="nodeControlItemTable statusTable">
-										<thead>
-											<tr>
-												<th>Item</th>
-												<th>Status</th>
-											</tr>
-										</thead>
-										<tbody>
-											<tr>
-												<!-- MVCS01372 - Linked text to Inhibit state of the node -->
-												<td class="dataLabel">Inhibit Status</td>
-												<!--  MVCS01442 - Changed color of inhibit switch status. -->
-												<td  data-bind="text: inhibitedText, css: {statusGoodText: !isInhibited(), statusBadText: isInhibited()}" >UNKNOWN</td>
-											</tr>
-											<tr>
-												<td class="dataLabel">Power Mode</td>
-												<td>UNAVAILABLE</td>
-											</tr>
-											<tr>
-												<td class="dataLabel">SW Status</td>
-												<td>UNAVAILABLE</td>
-											</tr>
-											<tr>
-												<td class="dataLabel">HW Status</td>
-												<td>UNAVAILABLE</td>
-											</tr>
-											<tr>
-												<td>&nbsp;</td>
-												<td>&nbsp;</td>
-											</tr>
-											<tr>
-												<td>&nbsp;</td>
-												<td>&nbsp;</td>
-											</tr>
-										</tbody>
-									</table>
-								</div>
-							</div>
-						</div>
-						<!--  /ko -->
+    <div id="nodeInformation" class="vbox" style="display: none !important"
+      data-bind="visible: true">
+      <!-- MVCS1453 - Fix AutoManagement GUI Issue -->
+      <div class="node content vbox"
+        data-bind="attr: { id: nodeId, 'name': nodeName, 'data-state': state, 'data-vehicleType' : className }, css: { comms: comms, emcon: emcon, emconCapable: emconCapable, autoManagement: autoManagementValue }">
+        <div class="nodeRunner hbox">
+          <div class="node" data-bind="attr: { 'name': nodeName, id: nodeId }">
+            <img data-bind="attr: { src: imgSrc } " />
+          </div>
+          <div class="vbox">
+            <div class="nodeId" data-bind="text: nodeName"></div>
+            <div class="dataItem hbox">
+              <div class="dataLabel">Loaded Mission:</div>
+              <div class="dataValue" data-bind="text: missionName"></div>
+            </div>
+          </div>
+        </div>
 
-						<div id="control">
-							<!-- ko foreach: nodeLinks -->
-							<div id="controlLinks">
-								<div class="nodeLink"
-									data-bind="attr: { 'data-linkType': commsType, 'data-status': status}">
-									<div class="nodeLinkHeader">
-										<div class="nodeLinkStatus">
-											<div data-bind="text: commsType"></div>
-											<div class="vehicleOnly linkStatus separator">-</div>
-											<div class="vehicleOnly linkStatus" data-bind="text: status"></div>
-										</div>
-										<div class="vehicleOnly linkStatus nodeLinkQuality">
-											<div class="linkQuality"
-												data-bind="attr: { 'quality' : quality }">
-												<div class="qualityBar"></div>
-												<div class="qualityBar"></div>
-												<div class="qualityBar"></div>
-												<div class="qualityBar"></div>
-											</div>
-										</div>
-										<div class="clear"></div>
-									</div>
-									<b data-bind="visible: $parents[0].transmitInactive">Transmit Status:<b data-bind="text: $parents[0].transmitAllowedText"></b></b>
+        <div id="nodeInfoMain" class="hbox">
+          <!-- MVCSSRS0806 -->
+          <div id="leftMenu" class="vbox">
+            <button class="navAll navButton viewButton" onclick="window.location = 'dash.html';">Dash</button>
+            <button class="navButton viewButton" data-navId='summary'
+              onclick="setSelectedView(this);" id="defaultNavView">Summary</button>
+            <button class="navButton viewButton" data-navId='control'
+              onclick="setSelectedView(this);">Control</button>
+            <button class="navButton viewButton" data-navId='status'
+              onclick="setSelectedView(this);">Status</button>
+            <button class="navButton viewButton" data-navId='alerts'
+              onclick="setSelectedView(this);">Alerts</button>
+          </div>
+          <div id="nodeInactiveView">
+            <!-- MVCS01433 Show Vehicle Inactive -->
+            <button id="forceNodeActive" data-bind="click: requestNodeActive.bind($data)">Vehicle
+              is Inactive, Force as Active</button>
+          </div>
+          <div id="nodeDataView" class="vbox">
+            <!--  ko if: isShip -->
+            <div id="summary">
+              <div class="nodeInfoBox">
+                <table class="nodeControlItemTable statusTable">
+                  <thead>
+                    <tr>
+                      <th>Item</th>
+                      <th>Status</th>
+                      <th></th>
+                    </tr>
+                  </thead>
+                  <tbody>
+                    <tr class="emcon status" data-bind="css: { 'good': emconInactive }">
+                      <td class="dataLabel">EMCON</td>
+                      <td><button class="request true"
+                          data-bind="click: requestEmcon.bind($data, 'false')">OFF</button></td>
+                      <td>
+                        <button class="request false"
+                          data-bind="click: requestEmcon.bind($data, 'true')">ACTIVE</button>
+                      </td>
+                    </tr>
 
-									<b data-bind="visible: $parents[0].isInhibited() && !$parents[0].isShip()">Inhibit Status:<b data-bind="text: $parents[0].isInhibited"></b></b>
-									
-									<div class="vehicleOnly nodeLinkRequests" data-bind="css: {'safeMode': $parents[0].transmitInactive}">
-										<!-- MVCS01373 - Ability to abort -->
-										<button class="linkButton abortButton"
-											data-bind="click: requestLinkAction.bind($data, $parent, 'abort')">Abort</button>
-											<!--  MVCS1597 No use button when link disconnected. -->
-										<button class="linkButton"
-											data-bind="click: requestLinkAction.bind($data, $parent, 'use'), visible: (status() == 'CONNECTED')">Use</button>
-										<b data-bind="visible: commsType() == 'LOS'"> 
-										<a  class="linkButton rfTestportTestButton modalbox"
-											href="#testSettings"
-											data-bind="click: populateTestSettings.bind($data, $parent)"><button>Test</button>
-										</a>
-										</b> 
-										<b data-bind="visible: commsType() == 'OTH'">
-										<a 	class="linkButton rfTestportTestButton modalbox"
-											href="#oth_testSettings"
-											data-bind="click: populateTestSettings.bind($data, $parent)"><button>Test</button> </a>
-										</b>
-										<button class="linkButton disableButton"
-											data-bind="click: requestLinkAction.bind($data, $parent, 'disable')">Disable</button>
-										<a class="configureButton modalbox linkButton"
-											href="#radioSettings"
-											data-bind="click: populateRadioSettings.bind($data, $parent)"><button>Configure</button>
-										</a>
-									</div>
-									<!-- MVCS01367 - Desensitize button in Automatic Mode-->
-									<div class="clear automaticMode" data-bind="css: {'safeMode': $parents[0].transmitInactive}">
-										<div class="powerItems">
-											<!-- ko if: $data.powerItems -->
-											<table class="powerTable">
-												<tr>
-													<td>Power</td>
-												</tr>
-												<!-- ko foreach: powerItems -->
-												<tr>
-													<td class="dataLabel" data-bind="text: displayName" />
-													<!-- MVCS01374 - Desensitize button in automatic mode-->
-													<td class="status" data-bind="css: { 'good': outputting}">
-														<button class="request true"
-															data-bind="click: requestPower.bind($data, $parents[1], 'true')">on</button>
-														<button class="request false"
-															data-bind="click: requestPower.bind($data, $parents[1], 'false')">off</button>
+                    <tr class="rfAllow status"
+                      data-bind="css: { 'good': transmitAllowed, disappear:!emconInactive()}">
+                      <td class="dataLabel">RF</td>
+                      <td><button class="request true"
+                          data-bind="click: requestTransmitAllow.bind($data, 'true')">Allowed</button>
+                      </td>
+                      <td>
+                        <button class="request false"
+                          data-bind="click: requestTransmitAllow.bind($data, 'false')">Not
+                          Allowed</button>
+                      </td>
+                    </tr>
+                  </tbody>
+                </table>
+              </div>
+              <div class="nodeInfoBox">
+                <table class="nodeControlItemTable statusTable">
+                  <thead>
+                    <tr>
+                      <th>Item</th>
+                      <th>Status</th>
+                    </tr>
+                  </thead>
+                  <tbody>
+                    <tr>
+                      <td class="dataLabel">SW Status</td>
+                      <td>UNAVAILABLE</td>
+                    </tr>
+                    <tr>
+                      <td class="dataLabel">HW Status</td>
+                      <td>UNAVAILABLE</td>
+                    </tr>
+                    <tr>
+                      <td>&nbsp;</td>
+                      <td>&nbsp;</td>
+                    </tr>
+                    <tr>
+                      <td>&nbsp;</td>
+                      <td>&nbsp;</td>
+                    </tr>
+                  </tbody>
+                </table>
+              </div>
+            </div>
+            <!--  /ko -->
+            <!--  ko ifnot: isShip -->
+            <div id="summary">
+              <div class="nodeInfoControlContainer">
+                <div class="nodeInfoBox">
+                  <table class="nodeControlItemTable statusTable">
+                    <thead>
+                      <tr>
+                        <th>Item</th>
+                        <th>Status</th>
+                        <th></th>
+                      </tr>
+                    </thead>
+                    <tbody>
+                      <tr>
+                        <td class="dataLabel">Priority</td>
+                        <td data-bind="text: priority"></td>
+                        <td><select
+                          data-bind="options: priorities, value: requestedPriority, optionsCaption: priority">
+                        </select></td>
+                      </tr>
+                      <tr class="emconStatus">
+                        <td class="dataLabel">EMCON</td>
+                        <td class="emconText" data-bind="css: { 'emcon': emcon }, text: emconText"></td>
+                        <td class="emconTimer" data-bind="text: emconTimeRemaining"></td>
+                      </tr>
+                      <tr class="zeroized status" data-bind="css: { 'good': keyed }">
+                        <td class="dataLabel">Crypto Status</td>
+                        <td><div class="booleanTrueIsGoodFalseIsBad"
+                            data-bind="css: { 'booleanTrue' : keyed }, text: keyedText"></div></td>
+                        <td>
+                          <button data-bind="click: requestZeroize.bind($data)">Zeroize</button>
+                        </td>
+                      </tr>
+                      <tr>
+                        <td class="dataLabel">Status</td>
+                        <td data-bind="text: state"></td>
+                        <td></td>
+                      </tr>
+                      <!--  MVCS1453 - Fix AutoManagement GUI Issue -->
+                      <tr class="managementMode status"
+                        data-bind="css: { 'good': autoManagementValue }">
+                        <td class="dataLabel">Management</td>
+                        <td>
+                          <button class="request true"
+                            data-bind="click: requestManagement.bind($data, 'true')">Automatic
+                          </button>
+                        </td>
+                        <td>
+                          <button class="request false"
+                            data-bind="click: requestManagement.bind($data, 'false')">Manual
+                          </button>
+                        </td>
+                      </tr>
+                      <tr class="commsAllowedMode status commsStuff"
+                        data-bind="css: { 'good': commsAllowed }">
+                        <td class="dataLabel">Communication</td>
+                        <td><button class="request true"
+                            data-bind="click: requestCommsAllowed.bind($data, 'true')">Allowed</button>
+                        </td>
+                        <td>
+                          <button class="request false"
+                            data-bind="click: requestCommsAllowed.bind($data, 'false')">Not
+                            Allowed</button>
+                        </td>
+                      </tr>
+                    </tbody>
+                  </table>
+                </div>
+                <div class="nodeInfoBox">
+                  <table class="nodeControlItemTable statusTable">
+                    <thead>
+                      <tr>
+                        <th>Item</th>
+                        <th>Status</th>
+                      </tr>
+                    </thead>
+                    <tbody>
+                      <tr>
+                        <!-- MVCS01372 - Linked text to Inhibit state of the node -->
+                        <td class="dataLabel">Inhibit Status</td>
+                        <!--  MVCS01442 - Changed color of inhibit switch status. -->
+                        <td
+                          data-bind="text: inhibitedText, css: {statusGoodText: !isInhibited(), statusBadText: isInhibited()}">UNKNOWN</td>
+                      </tr>
+                      <tr>
+                        <td class="dataLabel">Power Mode</td>
+                        <td>UNAVAILABLE</td>
+                      </tr>
+                      <tr>
+                        <td class="dataLabel">SW Status</td>
+                        <td>UNAVAILABLE</td>
+                      </tr>
+                      <tr>
+                        <td class="dataLabel">HW Status</td>
+                        <td>UNAVAILABLE</td>
+                      </tr>
+                      <tr>
+                        <td>&nbsp;</td>
+                        <td>&nbsp;</td>
+                      </tr>
+                      <tr>
+                        <td>&nbsp;</td>
+                        <td>&nbsp;</td>
+                      </tr>
+                    </tbody>
+                  </table>
+                </div>
+              </div>
+            </div>
+            <!--  /ko -->
 
-													</td>
-													<td>
-														<!-- MVCS01435 Display Fault Status --> 
-														<b data-bind="visible: fault()" class="statusBadText">FAULT</b>
-													</td>
-												</tr>
-												<!-- /ko -->
-											</table>
-											<!-- /ko -->
-										</div>
-										<div class="rfItems">
-											<!-- ko if: $data.rfDevice -->
-											<table class="rfTable inhibitMode">
-												<tr>
-													<td>RF Outputs</td>
-												</tr>
-												<!-- ko with: rfDevice -->
-												<!-- ko if: rfOutputs().length > 0 -->
-												<!-- ko foreach: rfOutputs -->
-												<tr>
-												<!-- PCR MVCS01445 - Convert LNR to L&R -->
-													<td class="dataLabel" data-bind="text: displayName" />
-													<!--  PCR MVCS01482, remove off button for RF outputs -->
-													<td class="status" data-bind="css: { 'good': outputting}">
-														<button class="request true"
-															data-bind="click: requestRF.bind($data, $parent, $parents[2], 'true'), css: { pressed: outputting, depressed:!outputting}">on</button>
-														<button class="request false shipOnly"
-															data-bind="click: requestRF.bind($data, $parent, $parents[2], 'false')">off</button>
-															
-															<!-- We only want to show these buttons if it the ship, and for the main link. -->
-															<button class="shipOnly request" data-bind="visible: displayName()=='MAIN', click: requestAmpAntenna.bind($data, $parent, $parents[2], 'true', 'PORT'), css: { on: ampAntenna() == 'PORT'}">Port</button>
-															<button class="shipOnly request" data-bind="visible: displayName()=='MAIN', click: requestAmpAntenna.bind($data, $parent, $parents[2], 'true', 'STBD'), css: { on: ampAntenna() == 'STBD'}">Stbd</button>
-															
-													</td>
-													<td />
-												</tr>
-												<!-- /ko -->
-												<!-- /ko -->
-												<!-- ko ifnot: rfOutputs().length > 0 -->
-												<tr>
-													<td>NO RF ITEMS</td>
-												</tr>
-												<!-- /ko -->
-												<!-- /ko -->
-											</table>
-											<!-- /ko -->
-										</div>
-										<div class="clear"></div>
-									</div>
-									<div class="clear"></div>
-								</div>
-							</div>
+            <div id="control">
+              <!-- ko foreach: nodeLinks -->
+              <div id="controlLinks">
+                <div class="nodeLink"
+                  data-bind="attr: { 'data-linkType': commsType, 'data-status': status}">
+                  <div class="nodeLinkHeader">
+                    <div class="nodeLinkStatus">
+                      <div data-bind="text: commsType"></div>
+                      <div class="vehicleOnly linkStatus separator">-</div>
+                      <div class="vehicleOnly linkStatus" data-bind="text: status"></div>
+                    </div>
+                    <div class="vehicleOnly linkStatus nodeLinkQuality">
+                      <div class="linkQuality" data-bind="attr: { 'quality' : quality }">
+                        <div class="qualityBar"></div>
+                        <div class="qualityBar"></div>
+                        <div class="qualityBar"></div>
+                        <div class="qualityBar"></div>
+                      </div>
+                    </div>
+                    <div class="clear"></div>
+                  </div>
+                  <b data-bind="visible: $parents[0].transmitInactive">Transmit Status:<b
+                    data-bind="text: $parents[0].transmitAllowedText"></b></b> <b
+                    data-bind="visible: $parents[0].isInhibited() && !$parents[0].isShip()">Inhibit
+                    Status:<b data-bind="text: $parents[0].isInhibited"></b>
+                  </b>
 
-							<!-- /ko -->
-							<div class="nodeInfoBox">
-								<table class="nodeControlItemTable statusTable">
-									<tbody>
+                  <div class="vehicleOnly nodeLinkRequests"
+                    data-bind="css: {'safeMode': $parents[0].transmitInactive}">
+                    <!-- MVCS01373 - Ability to abort -->
+                    <button class="linkButton abortButton"
+                      data-bind="click: requestLinkAction.bind($data, $parent, 'abort')">Abort</button>
+                    <!--  MVCS1597 No use button when link disconnected. -->
+                    <button class="linkButton"
+                      data-bind="click: requestLinkAction.bind($data, $parent, 'use'), visible: (status() == 'CONNECTED')">Use</button>
+                    <b data-bind="visible: commsType() == 'LOS'"> <a
+                      class="linkButton rfTestportTestButton modalbox" href="#testSettings"
+                      data-bind="click: populateTestSettings.bind($data, $parent)"><button>Test</button>
+                    </a>
+                    </b> <b data-bind="visible: commsType() == 'OTH'"> <a
+                      class="linkButton rfTestportTestButton modalbox" href="#oth_testSettings"
+                      data-bind="click: populateTestSettings.bind($data, $parent)"><button>Test</button>
+                    </a>
+                    </b>
+                    <button class="linkButton disableButton"
+                      data-bind="click: requestLinkAction.bind($data, $parent, 'disable')">Disable</button>
+                    <a class="configureButton modalbox linkButton" href="#radioSettings"
+                      data-bind="click: populateRadioSettings.bind($data, $parent)"><button>Configure</button>
+                    </a>
+                  </div>
+                  <!-- MVCS01367 - Desensitize button in Automatic Mode-->
+                  <div class="clear automaticMode"
+                    data-bind="css: {'safeMode': $parents[0].transmitInactive}">
+                    <div class="powerItems">
+                      <!-- ko if: $data.powerItems -->
+                      <table class="powerTable">
+                        <tr>
+                          <td>Power</td>
+                        </tr>
+                        <!-- ko foreach: powerItems -->
+                        <tr>
+                          <td class="dataLabel" data-bind="text: displayName" />
+                          <!-- MVCS01374 - Desensitize button in automatic mode-->
+                          <td class="status" data-bind="css: { 'good': outputting}">
+                            <button class="request true"
+                              data-bind="click: requestPower.bind($data, $parents[1], 'true')">on</button>
+                            <button class="request false"
+                              data-bind="click: requestPower.bind($data, $parents[1], 'false')">off</button>
 
-										<tr>
-											<!-- MVCSSRS0023, MVCSSRS776,MVCSSRS777(Requirements)MVCS01367(PCR): Maintenance Button -->
-											<td><button class="controlButton" id="maintenanceMode"
-													data-bind="click: requestMaintenance.bind($data)">Maintenance Mode</button></td>
-													<!--  MVCS001414 - Added Warm Shutdown ability -->
-											<td><button class="controlButton"
-													id="warmShutdownButton"
-													data-bind="click: requestWarmShutdown.bind($data)">Warm
-													Shutdown</button></td>
-											<!-- MVCSSRS0079, MVCSSRS0075,Gui30,Gui31(Requirements)MVCS01368(PCR): Cold ShutDown Button -->
-											<td><button class="controlButton"
-													id="coldShutdownButton"
-													data-bind="click: requestColdShutdown.bind($data)">Cold
-													Shutdown</button></td>
-										</tr>
-									</tbody>
-								</table>
-							</div>
+                          </td>
+                          <td>
+                            <!-- MVCS01435 Display Fault Status --> <b data-bind="visible: fault()"
+                            class="statusBadText">FAULT</b>
+                          </td>
+                        </tr>
+                        <!-- /ko -->
+                      </table>
+                      <!-- /ko -->
+                    </div>
+                    <div class="rfItems">
+                      <!-- ko if: $data.rfDevice -->
+                      <table class="rfTable inhibitMode">
+                        <tr>
+                          <td>RF Outputs</td>
+                        </tr>
+                        <!-- ko if: rfDevice.rfOutputs().length > 0 -->
+                        <!-- ko foreach: rfDevice.rfOutputs -->
+                        <tr>
+                          <!-- PCR MVCS01445 - Convert LNR to L&R -->
+                          <td class="dataLabel" data-bind="text: displayName()" />
+                          <!--  PCR MVCS01482, remove off button for RF outputs -->
+                          <td class="status" data-bind="css: {'good': outputting}">
+                            <button class="request true"
+                              data-bind="click: requestRF.bind($data, $parent.rfDevice, $parents[1], 'true'), css: { pressed: outputting, depressed:!outputting}">on</button>
+                            <button class="request false shipOnly"
+                              data-bind="click: requestRF.bind($data, $parent.rfDevice, $parents[1], 'false')">off</button>
+                          </td>
+                        </tr>
+                        <!-- We only want to show these buttons if it the ship, and for the main link. -->
+                        <!--  ko if: (displayName()=='MAIN' && $parents[1].isShip()) -->
+                        <tr>
+                          <td class="othAntennaStatus" data-bind="css:{'overrideOnText': $parent.antennaOverride(), 'overrideOffText': !$parent.antennaOverride() }, text: $parent.antennaOverride()?' Manual ':'Automatic' " />
+                          <td class="status">
+                            <button class="overrideOnButton"
+                              data-bind="visible: !$parent.antennaOverride(), click: requestOthAntennaOverride.bind($data, $parent,'true')">&nbsp; Manual &nbsp;</button>
+                            <button class="overrideOffButton"
+                              data-bind="visible: $parent.antennaOverride(), click: requestOthAntennaOverride.bind($data, $parent, 'false')">Automatic</button>
+                          </td>
+                        </tr>
+                        <tr>
+                          <td class="othAntennaStatus"
+                            data-bind="css:{'statusGoodText': outputting(), 'statusBadText': !outputting()}, text: 'Antenna:  &nbsp;&nbsp;' + ampAntenna()" />
+                          <td class="status">
+                            <button class="shipOnly request"
+                              data-bind="visible: outputting() && $parent.antennaOverride() && ampAntenna()!='PORT', click: requestAmpAntenna.bind($data, $parent.rfDevice, $parents[1], 'true', 'PORT')">PORT</button>
+                            <button class="shipOnly request"
+                              data-bind="visible: outputting() && $parent.antennaOverride() && ampAntenna()!='STBD', click: requestAmpAntenna.bind($data, $parent.rfDevice, $parents[1], 'true', 'STBD')">STBD</button>
+                          </td>
+                        </tr>
+                        <!-- /ko -->
+                        <!-- end of if MAIN and Ship -->
+                        <!-- /ko -->
+                        <!-- end of foreach output-->
+                        <!-- /ko -->
+                        <!-- end of if output less than 0-->
+                        <!-- ko ifnot: rfDevice.rfOutputs().length > 0 -->
+                        <tr>
+                          <td>NO RF ITEMS</td>
+                        </tr>
+                        <!-- /ko -->
+                      </table>
+                      <!-- /ko -->
+                      <!-- end of if $data.rfDevice -->
+                    </div>
+                    <div class="clear"></div>
+                  </div>
+                  <div class="clear"></div>
+                </div>
+              </div>
 
-						</div>
+              <!-- /ko -->
+              <div class="nodeInfoBox">
+                <table class="nodeControlItemTable statusTable">
+                  <tbody>
 
-						<div id="status">
-						<!--  Comms Link Status Table -->							
-							<div class="linkStatus nodeInfoBox">
-								<table class="nodeControlItemTable statusTable">								
-									<thead>
-											<tr>
-												<th>Link</th>
-												<th></th>
-												<th></th>
-												<th>Status</th>																					
-											</tr>
-									</thead>														
-									<!-- ko foreach: nodeLinks -->																											
-									<tbody>
-										<tr >											
-											<td data-bind="text: commsType"></td>			
-											<td></td>	
-											<td></td>
-											<td data-bind="text: status, css:{'statusDisconnected':status()=='DISCONNECTED','statusConnected':status()=='CONNECTED','statusActive':status()=='ACTIVE'}"></td>																	
-										</tr>										
-									</tbody>
-									<!-- /ko -->																									
-								</table>
-							</div>
-							<!--  Comms Power Output Status Table -->								
-							<div class="powerStatus nodeInfoBox">							
-								<table class="nodeControlItemTable statusTable">
-									<thead>
-											<tr>
-												<th>Radio</th>
-												<th>Power Item</th>
-												<th></th>
-												<th>Status</th>																						
-											</tr>
-									</thead>		
-									<!-- ko foreach: nodeLinks -->	
-									<!-- ko if: $data.powerItems -->											
-									<!-- ko foreach: powerItems -->									
-									<tbody>
-										<tr >
-											<td data-bind="text: $parents[0].commsType"></td>
-											<td data-bind="text: displayName"></td>
-											<td></td>
-											<td data-bind="text: outputting() ? 'ON' : 'OFF', css:{'statusGoodText': outputting(), 'statusBadText': !outputting()}"></td>										
-										</tr>										 
-									</tbody>
-									<!-- /ko -->
-									<!-- /ko -->
-									<!-- /ko -->
-								</table>							
-							</div>
-							<!--  Comms Rf Output Status Table -->
-							<div class="rfStatus nodeInfoBox">							
-								<table class="nodeControlItemTable statusTable">
-									<thead>
-										<tr>
-											<th>Radio</th>
-											<th>RF Output</th>
-											<th></th>
-											<th>Status</th>																				
-										</tr>
-									</thead>									
-									<!-- ko foreach: nodeLinks -->		
-									<!-- ko if: $data.rfDevice -->					
-									<!-- ko with: rfDevice -->
-									<!-- ko if: rfOutputs().length > 0 -->
-									<!-- ko foreach: rfOutputs -->								
-									<tbody>
-										<tr >
-											<td data-bind="text: $parents[1].commsType"></td>
-											<td data-bind="text: displayName"></td>			
-											<td></td>
-											<td data-bind="text: outputting() ? 'ON' : 'OFF', css:{'statusGoodText': outputting(), 'statusBadText': !outputting()}"></td>								
-										</tr>										
-									</tbody>
-									<!-- /ko -->
-									<!-- /ko -->
-									<!-- /ko -->
-									<!-- /ko -->			
-									<!-- /ko -->								
-								</table>								
-							</div>
-							<!--  Status Table for Filter Devices. -->
-							<div class="rfStatus nodeInfoBox">
-								<table class="nodeControlItemTable statusTable">
-									<thead>
-										<tr>
-											<th>Filter Device</th>
-											<th>Filter Status</th>
-										</tr>
-									</thead>
-									<!--  This displays the filter information for the current node. -->
-									<tbody>
-										<tr>
-											<td data-bind="text:$data.filterDevice.filterId"></td>
-											<td data-bind="text:$data.filterDevice.status"></td>
-										</tr>
-									</tbody>
-									<!--  End of the filter display -->
-								</table>
-							</div>
-							<!--  End Table for Filter Devices. -->
-						</div>
-						<div id="alerts">
-							<div class="alertsTableDiv">
+                    <tr>
+                      <!-- MVCSSRS0023, MVCSSRS776,MVCSSRS777(Requirements)MVCS01367(PCR): Maintenance Button -->
+                      <td><button class="controlButton" id="maintenanceMode"
+                          data-bind="click: requestMaintenance.bind($data)">Maintenance
+                          Mode</button></td>
+                      <!--  MVCS001414 - Added Warm Shutdown ability -->
+                      <td><button class="controlButton" id="warmShutdownButton"
+                          data-bind="click: requestWarmShutdown.bind($data)">Warm Shutdown</button></td>
+                      <!-- MVCSSRS0079, MVCSSRS0075,Gui30,Gui31(Requirements)MVCS01368(PCR): Cold ShutDown Button -->
+                      <td><button class="controlButton" id="coldShutdownButton"
+                          data-bind="click: requestColdShutdown.bind($data)">Cold Shutdown</button></td>
+                    </tr>
+                  </tbody>
+                </table>
+              </div>
 
-								<div id="spacer"></div>
+            </div>
 
-								<div id="alertsTabs" class="tabs"></div>
+            <div id="status">
+              <!--  Comms Link Status Table -->
+              <div class="linkStatus nodeInfoBox">
+                <table class="nodeControlItemTable statusTable">
+                  <thead>
+                    <tr>
+                      <th>Link</th>
+                      <th></th>
+                      <th></th>
+                      <th>Status</th>
+                    </tr>
+                  </thead>
+                  <!-- ko foreach: nodeLinks -->
+                  <tbody>
+                    <tr>
+                      <td data-bind="text: commsType"></td>
+                      <td></td>
+                      <td></td>
+                      <td
+                        data-bind="text: status, css:{'statusDisconnected':status()=='DISCONNECTED','statusConnected':status()=='CONNECTED','statusActive':status()=='ACTIVE'}"></td>
+                    </tr>
+                  </tbody>
+                  <!-- /ko -->
+                </table>
+              </div>
+              <!--  Comms Power Output Status Table -->
+              <div class="powerStatus nodeInfoBox">
+                <table class="nodeControlItemTable statusTable">
+                  <thead>
+                    <tr>
+                      <th>Radio</th>
+                      <th>Power Item</th>
+                      <th></th>
+                      <th>Status</th>
+                    </tr>
+                  </thead>
+                  <!-- ko foreach: nodeLinks -->
+                  <!-- ko if: $data.powerItems -->
+                  <!-- ko foreach: powerItems -->
+                  <tbody>
+                    <tr>
+                      <td data-bind="text: $parents[0].commsType"></td>
+                      <td data-bind="text: displayName"></td>
+                      <td></td>
+                      <td
+                        data-bind="text: outputting() ? 'ON' : 'OFF', css:{'statusGoodText': outputting(), 'statusBadText': !outputting()}"></td>
+                    </tr>
+                  </tbody>
+                  <!-- /ko -->
+                  <!-- /ko -->
+                  <!-- /ko -->
+                </table>
+              </div>
+              <!--  Comms Rf Output Status Table -->
+              <div class="rfStatus nodeInfoBox">
+                <table class="nodeControlItemTable statusTable">
+                  <thead>
+                    <tr>
+                      <th>Radio</th>
+                      <th>RF Output</th>
+                      <th></th>
+                      <th>Status</th>
+                    </tr>
+                  </thead>
+                  <!-- ko foreach: nodeLinks -->
+                  <!-- ko if: $data.rfDevice -->
+                  <!-- ko if: rfDevice.rfOutputs().length > 0 -->
+                  <!-- ko foreach: rfDevice.rfOutputs -->
+                  <tbody>
+                    <tr>
+                      <td data-bind="text: $parent.commsType"></td>
+                      <td data-bind="text: displayName"></td>
+                      <td></td>
+                      <td
+                        data-bind="text: outputting() ? 'ON' : 'OFF', css:{'statusGoodText': outputting(), 'statusBadText': !outputting()}"></td>
+                    </tr>
+                  </tbody>
+                  <!-- /ko -->
+                  <!-- /ko -->
+                  <!-- /ko -->
+                  <!-- /ko -->
+                </table>
+              </div>
+              <!--  Status Table for Filter Devices. -->
+              <div class="rfStatus nodeInfoBox">
+                <table class="nodeControlItemTable statusTable">
+                  <thead>
+                    <tr>
+                      <th>Filter Device</th>
+                      <th>Filter Status</th>
+                    </tr>
+                  </thead>
+                  <!--  This displays the filter information for the current node. -->
+                  <tbody>
+                    <tr>
+                      <td data-bind="text:$data.filterDevice.filterId"></td>
+                      <td data-bind="text:$data.filterDevice.status"></td>
+                    </tr>
+                  </tbody>
+                  <!--  End of the filter display -->
+                </table>
+              </div>
+              <!--  End Table for Filter Devices. -->
+            </div>
+            <div id="alerts">
+              <div class="alertsTableDiv">
 
-								<form class="levels">
-									<input id="High" type="radio" name="Level" class="levelFilter"
-										value="HIGH" onchange="AlertTableInstance.filterOnLevel()" />
-									<!--  -->
-									<label for="High">High</label>
-									<!--  -->
-									<input id="Medium" type="radio" name="Level"
-										class="levelFilter" value="MEDIUM|HIGH"
-										onchange="AlertTableInstance.filterOnLevel()" />
-									<!--  -->
-									<label for="Medium">Medium</label>
-									<!--  -->
-									<input type="radio" name="Level" class="levelFilter"
-										value="LOW|MEDIUM|HIGH"
-										onchange="AlertTableInstance.filterOnLevel()" checked />
-									<!--  -->
-									<label for="Low">Low</label>
-								</form>
+                <div id="spacer"></div>
 
-								<table id="alertsTable">
-									<tr id="atheader">
-										<th class="Date">Date</th>
-										<th class="Node">Node</th>
-										<th class="AlertMessage">AlertMessage</th>
-										<th class="Category">Category</th>
-										<th class="Level">Level</th>
-									</tr>
-								</table>
-							</div>
-						</div>
-					</div>
-				</div>
-			</div>
-		</div>
-	</div>
+                <div id="alertsTabs" class="tabs"></div>
+
+                <form class="levels">
+                  <input id="High" type="radio" name="Level" class="levelFilter" value="HIGH"
+                    onchange="AlertTableInstance.filterOnLevel()" />
+                  <!--  -->
+                  <label for="High">High</label>
+                  <!--  -->
+                  <input id="Medium" type="radio" name="Level" class="levelFilter"
+                    value="MEDIUM|HIGH" onchange="AlertTableInstance.filterOnLevel()" />
+                  <!--  -->
+                  <label for="Medium">Medium</label>
+                  <!--  -->
+                  <input type="radio" name="Level" class="levelFilter" value="LOW|MEDIUM|HIGH"
+                    onchange="AlertTableInstance.filterOnLevel()" checked />
+                  <!--  -->
+                  <label for="Low">Low</label>
+                </form>
+
+                <table id="alertsTable">
+                  <tr id="atheader">
+                    <th class="Date">Date</th>
+                    <th class="Node">Node</th>
+                    <th class="AlertMessage">AlertMessage</th>
+                    <th class="Category">Category</th>
+                    <th class="Level">Level</th>
+                  </tr>
+                </table>
+              </div>
+            </div>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
 </body>
 </html>
\ No newline at end of file
Index: WebContent/WEB-INF/web.xml
===================================================================
--- WebContent/WEB-INF/web.xml	(revision 9525)
+++ WebContent/WEB-INF/web.xml	(working copy)
@@ -237,4 +237,14 @@
     <servlet-name>AmpAntennaRequestServlet</servlet-name>
     <url-pattern>/AmpAntennaRequest</url-pattern>
   </servlet-mapping>
+  <servlet>
+    <description></description>
+    <display-name>OthAntennaOverrideRequestServlet</display-name>
+    <servlet-name>OthAntennaOverrideRequestServlet</servlet-name>
+    <servlet-class>mil.navy.lcs.mvcs.webgui.servlets.requests.OthAntennaOverrideRequestServlet</servlet-class>
+  </servlet>
+  <servlet-mapping>
+    <servlet-name>OthAntennaOverrideRequestServlet</servlet-name>
+    <url-pattern>/OthAntennaOverrideRequest</url-pattern>
+  </servlet-mapping>
 </web-app>
\ No newline at end of file
Index: WebContent/css/nodeInfo.css
===================================================================
--- WebContent/css/nodeInfo.css	(revision 9525)
+++ WebContent/css/nodeInfo.css	(working copy)
@@ -277,6 +277,29 @@
 	align-items: flex-end;
 }
 
+.overrideOffButton {
+	color: rgb(48, 255, 24);
+	border-style: solid;
+}
+
+.overrideOnButton {
+	border-style: solid;
+	color: rgb(255, 165, 0);
+}
+
+.overrideOffText {
+	color: rgb(48, 255, 24);
+}
+
+.overrideOnText {
+	color: rgb(255, 165, 0);
+}
+
+.othAntennaStatus {
+	padding-left: 3em;
+	/* text-align: center;	*/
+}
+
 .controlButton{
 width: 11em;
 margin-bottom:.3em;
Index: WebContent/js/Strings.js
===================================================================
--- WebContent/js/Strings.js	(revision 9525)
+++ WebContent/js/Strings.js	(working copy)
@@ -23,6 +23,7 @@
 	confirmEnableRF: "Are you sure you want to allow RF transmit. This will enable all shipboard radios and over the air rf paths.",
 	confirmDisableRF: "Are you sure you want to disable RF transmit.",
 	confirmDisableRFPath: "May lose comms. Disable Link?",
+	confirmAntennaOverride: "Are you sure you want to manually select antenna?",
 
 	alertEmconTimeValue: "Please enter a value between 1 and 120",
 	alertZeroizeCommandReceived: "Zeroization command will be sent to the vehicle.",
Index: WebContent/js/nodeInfo.js
===================================================================
--- WebContent/js/nodeInfo.js	(revision 9525)
+++ WebContent/js/nodeInfo.js	(working copy)
@@ -15,7 +15,7 @@
 var radioConfigNodeId;
 var radioConfigAction;
 
-//Used to hold parameters for RF Output Test Window
+// Used to hold parameters for RF Output Test Window
 var radioTestLinkId;
 var radioTestNodeId;
 
@@ -64,7 +64,8 @@
 			// Initialize observables using knockout mapping
 			ko.mapping.fromJS(options.data, {}, this);
 
-			//Using the JavaScript object retrieved class name of object transmitted
+			// Using the JavaScript object retrieved class name of object
+			// transmitted
 			this.imgSrc = ko.computed(function() {
 				return "images/nodes/" + this.className();
 			}, this);
@@ -73,7 +74,7 @@
 				return this.className() == 'ShipNode';
 			}, this);
 
-			//Returns the enum value that corresponds to the returned boolean.
+			// Returns the enum value that corresponds to the returned boolean.
 			this.emconText = ko.computed(function() {
 				return Strings.emconstatus[this.emcon()];
 			}, this);
@@ -82,7 +83,7 @@
 				return !this.emcon();
 			}, this);
 
-			//Returns the string form the enum values, for transmit allowed.
+			// Returns the string form the enum values, for transmit allowed.
 			this.transmitAllowedText = ko.computed(function() {
 				if (this.isShip())
 					return Strings.rftransmit[this.transmitAllowed()];
@@ -94,18 +95,21 @@
 
 			this.autoManagementText = ko.computed(function() {
 				if (!this.isShip())
-				return Strings.automanual[this.autoManagement()];
+					return Strings.automanual[this.autoManagement()];
 			}, this);
 
-			/*MVCS1453 - Fix AutoManagement GUI Issue
-			 * The automanagement value is specific to the vehicle, and
-			 * causes error when the ship references it. This value is created to prevent this issue.*/
+			/*
+			 * MVCS1453 - Fix AutoManagement GUI Issue The automanagement value
+			 * is specific to the vehicle, and causes error when the ship
+			 * references it. This value is created to prevent this issue.
+			 */
 			this.autoManagementValue = ko.computed(function() {
 				if (!this.isShip())
-				return this.autoManagement();
+					return this.autoManagement();
 			}, this);
 
-			// The available priorities, used by knockout to populate the selection menu
+			// The available priorities, used by knockout to populate the
+			// selection menu
 			this.priorities = priorities;
 
 			// The selected value in the priority dropdown
@@ -124,7 +128,8 @@
 			// Timer handle for updating emconTimeRemaining setInterval
 			this.emconTimer = null;
 
-			// Updates the emconTimeRemaining observable property to a H:MM:SS string based on the emconEndTime property
+			// Updates the emconTimeRemaining observable property to a H:MM:SS
+			// string based on the emconEndTime property
 			this.updateEmconTimeRemaining = function() {
 				var timeRemaining = Math.floor(self.emconEndTime()
 						- (Date.now() / 1000));
@@ -131,7 +136,8 @@
 				self.emconTimeRemaining(secondsToTime(timeRemaining));
 			};
 
-			// Force update timer when the EMCON end time has changed. for example
+			// Force update timer when the EMCON end time has changed. for
+			// example
 			// when switching between node views.
 			this.emconEndTime.subscribe(function() {
 				self.updateEmconTimeRemaining();
@@ -155,9 +161,9 @@
 
 			}, this);
 
-			//PCR: MVCS01441
+			// PCR: MVCS01441
 			this.inhibitedText = ko.computed(function() {
-				if(!this.isShip())
+				if (!this.isShip())
 					return Strings.inhibitStatus[this.isInhibited()];
 			}, this);
 
@@ -165,10 +171,10 @@
 	}
 };
 
-//Removes Fading of the fancybox
+// Removes Fading of the fancybox
 $.fancybox({
 	'transitionIn' : 'none',
-	'transitionOut': 'none'
+	'transitionOut' : 'none'
 });
 
 var setSelectedView = function(item) {
@@ -179,7 +185,7 @@
 };
 
 var requestManagement = function(auto, node) {
-	//MVCS01371 & MVCSSRS0802-Confirmation box for link management.
+	// MVCS01371 & MVCSSRS0802-Confirmation box for link management.
 	if (auto == 'false' && !confirm(Strings.confirmManual))
 		return;
 
@@ -249,9 +255,9 @@
 
 var requestRF = function(device, node, on, output) {
 
-	//PCR MVCS01394 - Confirmation Box for disabling links.
-	if(on == "false" && !confirm(Strings.confirmDisableRFPath))
-	{
+	//alert(node.nodeId()+" " + link.rfDevice.name() + " ");
+	// PCR MVCS01394 - Confirmation Box for disabling links.
+	if (on == "false" && !confirm(Strings.confirmDisableRFPath)) {
 		return;
 	}
 
@@ -269,17 +275,19 @@
 	});
 };
 
-//Javascript that will validate RF request, against powered Amplifiers
+// Javascript that will validate RF request, against powered Amplifiers
 var isAmpPowerRequired = function(device, node, on, output) {
 	// August 22, 2015
 	// Arthur Wagner, Andy Lubin
-	// Emergency Fix to prevent loss of comms when the main path is selected without the amplifier being turned on.
+	// Emergency Fix to prevent loss of comms when the main path is selected
+	// without the amplifier being turned on.
 	// Main amplifier will turn on first when user selects RF Output-MAIN.
-	// The Patch that the program office really really really wanted, that it couldn't wait a day.
-	//----------------------------------------BEGIN
+	// The Patch that the program office really really really wanted, that it
+	// couldn't wait a day.
+	// ----------------------------------------BEGIN
 
-	if ( (device.name() == 'rt1944-1') && (output.outputType() == 'MAIN') && (on == 'true') )
-	{
+	if ((device.name() == 'rt1944-1') && (output.outputType() == 'MAIN')
+			&& (on == 'true')) {
 		$.ajax({
 			url : 'PowerRequest',
 			type : 'post',
@@ -291,8 +299,8 @@
 		});
 	}
 
-	if ( (device.name() == 'rt1944-2') && (output.outputType() == 'MAIN') && (on == 'true') )
-	{
+	if ((device.name() == 'rt1944-2') && (output.outputType() == 'MAIN')
+			&& (on == 'true')) {
 		$.ajax({
 			url : 'PowerRequest',
 			type : 'post',
@@ -304,8 +312,8 @@
 		});
 	}
 
-	if ( (device.name() == 'rt1944-1') && (output.outputType() == 'LNR') && (on == 'true') )
-	{
+	if ((device.name() == 'rt1944-1') && (output.outputType() == 'LNR')
+			&& (on == 'true')) {
 		$.ajax({
 			url : 'PowerRequest',
 			type : 'post',
@@ -317,8 +325,8 @@
 		});
 	}
 
-	if ( (device.name() == 'rt1944-2') && (output.outputType() == 'LNR') && (on == 'true') )
-	{
+	if ((device.name() == 'rt1944-2') && (output.outputType() == 'LNR')
+			&& (on == 'true')) {
 		$.ajax({
 			url : 'PowerRequest',
 			type : 'post',
@@ -330,10 +338,10 @@
 		});
 	}
 	// August 22, 2015
-	//----------------------------------------END
+	// ----------------------------------------END
 }
 
-//JavaScript function called when the Amplifier is requested to be changed.
+// JavaScript function called when the Amplifier is requested to be changed.
 var requestAmpAntenna = function(device, node, on, antenna, output) {
 
 	$.ajax({
@@ -349,78 +357,87 @@
 	});
 };
 
-//JavaScript function that is called when a node request shutdown (MVCS01414)
-var requestWarmShutdown = function(node)
-{
+// JavaScript function called when the OTH antenna override is requested to be
+// changed.
+var requestOthAntennaOverride = function(link, on, output) {
+	if (on=='true' && !confirm(Strings.confirmAntennaOverride))
+		return;
+	$.ajax({
+		url : 'OthAntennaOverrideRequest',
+		type : 'post',
+		data : {
+			'linkId' : link.linkId(),
+			'requested' : on
+		}
+	});
+};
+
+// JavaScript function that is called when a node request shutdown (MVCS01414)
+var requestWarmShutdown = function(node) {
 	requestShutdown(node, "WARM_SHUTDOWN");
 
 };
 
-//JavaScript function that is called when a node request shutdown(MVCSSRS0079 & MVCSSRS0075)
-var requestColdShutdown = function(node)
-{
+// JavaScript function that is called when a node request shutdown(MVCSSRS0079 &
+// MVCSSRS0075)
+var requestColdShutdown = function(node) {
 	requestShutdown(node, "COLD_SHUTDOWN");
 };
-var requestShutdown = function(node, shutdownType)
-{
+var requestShutdown = function(node, shutdownType) {
 
-	//MVCS01368 & MVCSSRS0076 - Confirmation box for shutdown.
+	// MVCS01368 & MVCSSRS0076 - Confirmation box for shutdown.
 	if (!confirm(Strings.confirmShutdown))
 		return;
 
-	if(node.state() == "DEPLOYED" && prompt(Strings.confirmShutdownOffboard) != "shutdown")
-		{
-			return;
-		}
+	if (node.state() == "DEPLOYED"
+			&& prompt(Strings.confirmShutdownOffboard) != "shutdown") {
+		return;
+	}
 	$.ajax({
 		url : 'ExitRequest',
-		type: 'post',
+		type : 'post',
 		data : {
-				'nodeId' : node.nodeId(),
-				'requested' : shutdownType,
-				}
+			'nodeId' : node.nodeId(),
+			'requested' : shutdownType,
+		}
 	});
 
 };
 
-//JavaScript function that is called when a node request shutdown(MVCSSRS0023)
-var requestMaintenance = function(node)
-{
-	//MVCSSRS778(Requirements)MVCS01367(PCR)
+// JavaScript function that is called when a node request shutdown(MVCSSRS0023)
+var requestMaintenance = function(node) {
+	// MVCSSRS778(Requirements)MVCS01367(PCR)
 	if (!confirm(Strings.confirmMaintenance))
 		return;
 
-	if(node.state() == "DEPLOYED" && prompt(Strings.confirmMaintenanceOffboard) != "maintenance")
-	{
+	if (node.state() == "DEPLOYED"
+			&& prompt(Strings.confirmMaintenanceOffboard) != "maintenance") {
 		return;
 	}
 
-		$.ajax({
+	$.ajax({
 		url : 'ExitRequest',
-		type: 'post',
+		type : 'post',
 		data : {
-				'nodeId' : node.nodeId(),
-				'requested' : 'COLD_EXIT',
-				}
+			'nodeId' : node.nodeId(),
+			'requested' : 'COLD_EXIT',
+		}
 	});
 };
 
 var requestTransmitAllow = function(on, node) {
 
-	//MVCS01370 & MVCSSRS0797: Confirmation for RF Transmission
-	if(on == "true")
-	{
+	// MVCS01370 & MVCSSRS0797: Confirmation for RF Transmission
+	if (on == "true") {
 		if (!confirm(Strings.confirmEnableRF))
 			return;
 	}
 
-	if(on == "false")
-	{
+	if (on == "false") {
 		if (!confirm(Strings.confirmDisableRF))
 			return;
 	}
 
-
 	$.ajax({
 		url : 'TransmitAllowRequest',
 		type : 'post',
@@ -432,7 +449,7 @@
 };
 
 var requestCommsAllowed = function(on, node) {
-	//MVCS01370 & MVCSSRS0804- Confirmation box when disabling comms.
+	// MVCS01370 & MVCSSRS0804- Confirmation box when disabling comms.
 	if (on == 'false' && !confirm(Strings.confirmCommDisabled))
 		return;
 
@@ -489,11 +506,11 @@
 		data : {
 			'nodeId' : radioConfigNodeId,
 			'linkId' : radioConfigLinkId,
-			'frequency' :  $('#radioSettings_frequency').attr('value')
+			'frequency' : $('#radioSettings_frequency').attr('value')
 		}
 	});
 
-	//Used to prevent the form form submission and page refresh.
+	// Used to prevent the form form submission and page refresh.
 	event.preventDefault();
 };
 
@@ -501,15 +518,12 @@
 	var testValue = "Blank";
 	$.fancybox.close();
 
-	for(var i = 0; i < selectedTest.length; i++)
-	{
-		if(selectedTest[i].checked)
-		{
+	for (var i = 0; i < selectedTest.length; i++) {
+		if (selectedTest[i].checked) {
 			testValue = selectedTest[i].value;
 		}
 	}
 
-
 	$.ajax({
 		url : 'RfTestPortSetting',
 		type : 'post',
@@ -516,12 +530,12 @@
 		data : {
 			'nodeId' : radioTestNodeId,
 			'linkId' : radioTestLinkId,
-			'start'  : startTesting,
+			'start' : startTesting,
 			'test' : testValue
 		}
 	});
 
-	//Used to prevent the form submission and page refresh.
+	// Used to prevent the form submission and page refresh.
 	event.preventDefault();
 };
 
@@ -535,20 +549,19 @@
 		data : {
 			'nodeId' : radioTestNodeId,
 			'linkId' : radioTestLinkId,
-			'start'  : startTesting,
+			'start' : startTesting,
 			'test' : testValue
 		}
 	});
 
-	//Used to prevent the form submission and page refresh.
+	// Used to prevent the form submission and page refresh.
 	event.preventDefault();
 };
 
 var populateRadioSettings = function(node, link) {
-//	$('#radioSettings_frequency').attr('value', link.frequency());
+	// $('#radioSettings_frequency').attr('value', link.frequency());
 	document.getElementById('freq_value').innerHTML = link.frequency();
-	$('#radioSettings_config_label').html(
-			link.commsType());
+	$('#radioSettings_config_label').html(link.commsType());
 
 	radioConfigLinkId = link.linkId();
 	radioConfigNodeId = node.nodeId();
@@ -555,8 +568,7 @@
 };
 
 var populateTestSettings = function(node, link) {
-	$('#test_selection').html(
-			link.commsType() + " (" + link.linkId() + ")");
+	$('#test_selection').html(link.commsType() + " (" + link.linkId() + ")");
 
 	radioTestLinkId = link.linkId();
 	radioTestNodeId = node.nodeId();
@@ -611,7 +623,7 @@
 	GuiUtils.getInstance().setConnectionGained();
 
 	// Used for populating the priority drop-downvar nodeCount = nodes.length;
-	for ( var i = 0; i < nodes.length - 1; i++)
+	for (var i = 0; i < nodes.length - 1; i++)
 		priorities.push(i + 1);
 
 	// If initial, create the view model
@@ -625,7 +637,8 @@
 		ko.mapping.fromJS(navModel, navViewModel);
 	}
 
-	// Need to initialize node after so that priorities are there for the drop-down
+	// Need to initialize node after so that priorities are there for the
+	// drop-down
 	$.when(nodeAjax()).then(initNodeSuccess, initNodeFailure);
 };
 
@@ -644,7 +657,7 @@
 /**
  * Handles a successful AJAX for getting current node data, updating the view
  * model.
- *
+ * 
  * @param node
  *            The AJAX response
  */
@@ -682,7 +695,7 @@
 	var response = $.get('Node?node=' + nodeId, null, {}, 'json');
 	response.success(getNodeSuccess);
 	response.error(initNodeFailure);
-	//Forces the name on the tab to the proper Node Name
+	// Forces the name on the tab to the proper Node Name
 	document.title = nodeName;
 };
 
Index: src/mil/navy/lcs/mvcs/webgui/servlets/requests/OthAntennaOverrideRequestServlet.java
===================================================================
--- src/mil/navy/lcs/mvcs/webgui/servlets/requests/OthAntennaOverrideRequestServlet.java	(nonexistent)
+++ src/mil/navy/lcs/mvcs/webgui/servlets/requests/OthAntennaOverrideRequestServlet.java	(working copy)
@@ -0,0 +1,63 @@
+package mil.navy.lcs.mvcs.webgui.servlets.requests;
+
+import java.io.IOException;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import mil.navy.lcs.mvcs.webgui.app.AppState;
+import mil.navy.lcs.mvcs.webgui.servlets.MvcsServlet;
+import mil.navy.lcs.mvcs.webgui.servlets.ServletUtils;
+
+/**
+ * Servlet implementation class OthAntennaOverrideRequest
+ */
+public class OthAntennaOverrideRequestServlet extends MvcsServlet {
+	private static final long serialVersionUID = 1L;
+	 private static final Logger logger = LoggerFactory.getLogger(OthAntennaOverrideRequestServlet.class);
+       
+    /**
+     * @see HttpServlet#HttpServlet()
+     */
+    public OthAntennaOverrideRequestServlet() {
+        super();
+    }
+
+   @Override
+   protected void doAuthenticatedGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
+   {
+      //Nothing to do here for MVCS.
+   }
+
+   @Override
+   protected void doAuthenticatedPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
+   {
+      try
+      {
+         String linkId = ((String) request.getParameter("linkId"));
+         String requested = ((String) request.getParameter("requested"));
+         boolean on = "true".equalsIgnoreCase(requested);
+         
+         System.out.println("OTH Antenna Override: " + linkId + " " + requested);
+
+         logger.info("OthAntennaOverride request: {} {} ", new Object[] { linkId, requested });
+
+         AppState.instance.bi.getBackend().requestOthAntennaOverride(linkId, on);
+
+         response.setContentType("text/plain");
+      }
+      catch (Exception e)
+      {
+         logger.error("Failed Antenna Change Request: {} ", ServletUtils.parametersToString(request));
+         logger.error("Error: ", e);
+         throw new ServletException(e);
+      }
+
+      
+   }
+
+}
Index: test.system/mil/navy/lcs/mvcs/webgui/app/BackendInterfaceTest.java
===================================================================
--- test.system/mil/navy/lcs/mvcs/webgui/app/BackendInterfaceTest.java	(revision 9525)
+++ test.system/mil/navy/lcs/mvcs/webgui/app/BackendInterfaceTest.java	(working copy)
@@ -225,4 +225,9 @@
       // TODO Auto-generated method stub
       
    }
+
+   @Override
+   public void requestOthAntennaOverride(String linkId, boolean manual) throws RemoteException
+   {
+   }
 }
